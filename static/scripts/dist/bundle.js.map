{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./static/scripts/src/helpers/playerSettings.js","webpack:///./static/scripts/src/helpers/getAttackPosition.js","webpack:///./static/scripts/src/Core/Display.js","webpack:///./static/scripts/src/Core/Game.js","webpack:///./static/scripts/src/Core/Engine.js","webpack:///./static/scripts/src/Player/Player.js","webpack:///./static/scripts/src/Player/Golem.js","webpack:///./static/scripts/src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","size","x","y","position","color","health","max","magic","1","options","attackStartTime","currentAttackTime","2","Display","game","this","ctx","clearRect","gameWidth","gameHeight","drawBackground","drawText","drawPlayers","globalAlpha","drawImage","background","font","fillStyle","textAlign","fillText","player1","getName","player2","getWins","player","playerSettings","currentPlayer","drawPlayer","imageX","posX","barX","attackDir","drawCells","drawPoints","params","attackOptions","attack","startTime","attackBlock","width","height","attackPosition","getAttackPosition","index","time","beginPath","Math","strokeStyle","rect","fill","stroke","skin","currentOptions","drawBars","keys","abilities","forEach","e","idx","img","lineWidth","arc","PI","offsetX","startPositionY","healthPosition","barDistance","energyPosition","manaPosition","drawBar","firstColor","mainColor","values","hp","maxhp","energy","maxenergy","mana","maxmana","Game","engine","myPlayerIndex","canvas","document","querySelector","getContext","display","turns","turnTimer","singleMode","difficult","Number","players","setMyPlayer","firstPlayer","setCurrentPlayer","setBackground","bgIndex","data","console","log","enemyAttack","opponentPlayer","controls","code","prepareAttack","changeTurn","myPlayer","setTimeout","makeTurn","setHealth","health1","health2","setState","parseAbilities","round","Image","src","isTurningPlayer","isAttackAvailable","clearTimeout","emit","attackCode","endTurn","endTurns","makeAITurn","random","otherPlayer","undefined","calculateDamage","updateAbilities","checkWinner","getAbilities","attacks","counterattack","floor","length","attempts","filteredKeys","filter","k","attackKey","getCounterattack","updateState","emitToRoom","attack1","attack2","aa","attackArea","blockType","attackType","damage","blockPercentage","updateHealth","weakness","id","armor","restart","wins","restartGame","reset","dir","speed","render","Engine","socket","play","roomId","addEventListener","event","window","onblur","pauseGame","onfocus","continueGame","on","onSocketEvent","run","status","frame","update","requestAnimationFrame","url","Player","setSkin","manaRegen","energyRegen","preparedAbilities","passiveAbilities","keyName","iconSrc","effects","type","image","state","min","push","ability","thisAbility","removeAbility","applyAbility","abilityName","includes","isAbilityAvailable","prepareAbility","add","Golem","onload","io","location","host","fetch","method","then","response","json","updateRoomList","rooms","elements","gameContainer","roomsContainer","formCreateRoom","getElementById","formTraining","formBoss","gameStatus","player1Info","player2Info","onsubmit","preventDefault","FormData","target","classList","mappingBotName","3","botName","renderGame","playerIndex","startGame","mappingBoss","bossValue","bossName","match","RegExp","bossKey","boss","innerHTML","entries","item","createElement","className","button","textContent","appendChild","remove"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\r\n    size: {\r\n        x: 150,\r\n        y: 200\r\n    },\r\n    position: {\r\n        x: 30,\r\n        y: 190\r\n    },\r\n    color: '#fff',\r\n    health: {\r\n        color: 'green',\r\n        max: 100,\r\n        size: 23\r\n    },\r\n    magic: {\r\n        color: 'blue',\r\n        max: 100,\r\n        size: 23\r\n    }\r\n};\r\n","export default {\r\n    1: (options) => {\r\n        return {\r\n            x: options.x + (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 50\r\n        }\r\n    },\r\n    2: (options) => {\r\n        return {\r\n            x: options.x - 50 - (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 120\r\n        }\r\n    }\r\n};\r\n","import playerSettings from \"../helpers/playerSettings\";\r\nimport getAttackPosition from \"../helpers/getAttackPosition\";\r\n\r\nclass Display {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n\r\n    render() {\r\n        const ctx = this.game.ctx;\r\n        ctx.clearRect(0, 0, this.game.gameWidth, this.game.gameHeight);\r\n        this.drawBackground(ctx);\r\n        this.drawText(ctx);\r\n        this.drawPlayers(ctx);\r\n    }\r\n\r\n    drawBackground(ctx) {\r\n        ctx.globalAlpha = .6;\r\n        ctx.drawImage(this.game.background, 0, 0);\r\n        ctx.globalAlpha = 1;\r\n    }\r\n\r\n    drawText(ctx) {\r\n        ctx.font = \"16px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(this.game.player1.getName() + ' против ' + this.game.player2.getName(), this.game.gameWidth / 2, 40);\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillText(this.game.player1.getWins() + ':' + this.game.player2.getWins(), this.game.gameWidth / 2, 60);\r\n    }\r\n\r\n    drawPlayers(ctx) {\r\n        const player = playerSettings;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            const currentPlayer = i === 0 ? this.game.player1 : this.game.player2;\r\n            if (i === 0) { // player 1\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: player.position.x,\r\n                    posX: player.position.x,\r\n                    barX: 0,\r\n                    attackDir: 1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: player.position.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer);\r\n                this.drawPoints(ctx, {\r\n                    x: player.position.x + player.size.x + 25,\r\n                    y: player.position.y + player.size.y / 2\r\n                }, currentPlayer);\r\n            } else { // player 2\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: this.game.gameWidth - player.position.x - player.size.x,\r\n                    posX: this.game.gameWidth - player.position.x - player.size.x,\r\n                    barX: (this.game.gameWidth - player.position.x - player.size.x) - player.position.x,\r\n                    attackDir: -1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: this.game.gameWidth - player.position.x - player.size.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer);\r\n                this.drawPoints(ctx, {\r\n                    x: this.game.gameWidth - player.position.x - player.size.x - 25,\r\n                    y: player.position.y + player.size.y / 2\r\n                }, currentPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawPlayer(ctx, params) {\r\n        const player = playerSettings;\r\n        const currentPlayer = params.player;\r\n\r\n        // attack\r\n        const attackOptions = currentPlayer.options.attack;\r\n\r\n        const attackStartTime = attackOptions.startTime;\r\n        const attackBlock = {\r\n            width: attackOptions.width,\r\n            height: attackOptions.height\r\n        };\r\n\r\n        const attackPosition = getAttackPosition[currentPlayer.index]({\r\n            x: params.posX,\r\n            y: player.position.y - 10,\r\n            width: player.size.x,\r\n            attackStartTime,\r\n            currentAttackTime: currentPlayer.attack.time\r\n        });\r\n\r\n        ctx.beginPath();\r\n        ctx.globalAlpha = Math.max(0, 1 - (currentPlayer.attack.time / attackStartTime));\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'blue';\r\n        ctx.rect(attackPosition.x, attackPosition.y, attackBlock.width, attackBlock.height);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.font = \"14px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(currentPlayer.attack.params.name, attackPosition.x + attackBlock.width / 2, attackPosition.y + 4 + attackBlock.height / 2);\r\n\r\n        ctx.globalAlpha = 1;\r\n\r\n        // other\r\n        ctx.drawImage(currentPlayer.skin, params.imageX, player.position.y, player.size.x, player.size.y);\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = currentPlayer.currentOptions.color;\r\n        ctx.rect(params.posX, player.position.y, player.size.x, player.size.y);\r\n        ctx.stroke();\r\n\r\n        this.drawBars(ctx, params.barX, currentPlayer);\r\n    }\r\n\r\n    drawCells(ctx, position, currentPlayer) {\r\n        Object.keys(currentPlayer.abilities).forEach((e, idx) => {\r\n            ctx.drawImage(currentPlayer.abilities[e].img, position.x + (idx * 55), position.y + 15, 40, 40);\r\n        });\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.rect(position.x + (i * 55), position.y + 15, 40, 40);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawPoints(ctx, position, currentPlayer) {\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = currentPlayer.position === i ? 'green' : '#8c8c8c';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.arc(position.x, position.y - 30 + (i * 30), 8, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n        }\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.arc(position.x, position.y - 30 + (i * 30), 8, 0, 2 * Math.PI);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawBars(ctx, offsetX, currentPlayer) {\r\n        const player = playerSettings;\r\n        const barDistance = 31;\r\n        const startPositionY = player.position.y - 5;\r\n\r\n        const healthPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 3};\r\n        const energyPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 2};\r\n        const manaPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance};\r\n\r\n        ctx.textAlign = \"left\";\r\n\r\n        this.drawBar(ctx, healthPosition,\r\n            {\r\n                firstColor: 'red',\r\n                mainColor: '#078c07',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.hp, currentPlayer.maxhp]\r\n            });\r\n        this.drawBar(ctx, energyPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#38a0d2',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.energy, currentPlayer.maxenergy]\r\n            });\r\n        this.drawBar(ctx, manaPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#19287b',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.mana, currentPlayer.maxmana]\r\n            });\r\n    }\r\n\r\n    drawBar(ctx, position, params) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.firstColor;\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.mainColor;\r\n        ctx.rect(position.x, position.y, Math.max(0, params.player.size.x * (params.values[0] / params.values[1])), params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillText(params.values[0] + \"/\" + params.values[1], position.x + 5, position.y + 16);\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.lineWidth = \"1\";\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport default Display;\r\n","import Display from \"./Display\";\r\n\r\nclass Game {\r\n    constructor(engine, myPlayerIndex, player1, player2, params) {\r\n        this.canvas = document.querySelector('#game');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.engine = engine;\r\n        this.display = new Display(this);\r\n        this.gameWidth = this.canvas.width;\r\n        this.gameHeight = this.canvas.height;\r\n        this.turns = 0;\r\n        this.turnTimer = null;\r\n        this.singleMode = params.singleMode || false;\r\n        this.difficult = Number(params.difficult) || 1;\r\n        this.player1 = player1;\r\n        this.player2 = player2;\r\n        this.players = [this.player1, this.player2];\r\n        this.setMyPlayer(myPlayerIndex);\r\n        this.firstPlayer = 1;\r\n        this.setCurrentPlayer();\r\n        this.setBackground(params.bgIndex);\r\n    }\r\n\r\n    onSocketEvent(name, data) {\r\n        switch (name) {\r\n            case 'gameChangeTurn':\r\n                console.log('socket change turn, ', this.turns);\r\n\r\n                const enemyAttack = this.opponentPlayer.controls[data.code];\r\n                this.prepareAttack(enemyAttack, this.opponentPlayer);\r\n\r\n                if (this.turns < 2) {\r\n                    this.changeTurn(this.opponentPlayer, this.myPlayer);\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n\r\n                break;\r\n\r\n            case 'gameEndCalculating':\r\n                this.player1.setHealth(data.health1);\r\n                this.player2.setHealth(data.health2);\r\n                break;\r\n\r\n            case 'gameEndAttack':\r\n                console.log('socket gameEndAttack');\r\n                this.players.forEach(player => {\r\n                    player.setState('endAttack', player.attack.params);\r\n                });\r\n                break;\r\n\r\n            case 'gameOpponentAbilities':\r\n                console.log('socket gameOpponentAbilities');\r\n                console.log(data.abilities);\r\n                this.opponentPlayer.parseAbilities(data.abilities);\r\n                break;\r\n\r\n            case 'gameEndTurn':\r\n                console.log('socket gameEndTurn');\r\n                this.round();\r\n                break;\r\n        }\r\n    }\r\n\r\n    setMyPlayer(index) {\r\n        this.myPlayer = index === 1 ? this.player1 : this.player2;\r\n        this.opponentPlayer = index === 1 ? this.player2 : this.player1;\r\n    }\r\n\r\n    setCurrentPlayer() {\r\n        this.currentPlayer = this.firstPlayer === 1 ? this.player1 : this.player2;\r\n        this.currentPlayer.currentOptions.color = 'aqua';\r\n    }\r\n\r\n    setBackground(index) {\r\n        const background = new Image();\r\n        background.src = `/static/img/bg/${index}.jpg`;\r\n        this.background = background;\r\n    }\r\n\r\n    makeTurn(code) {\r\n        // debug info\r\n        if (code === 'KeyM') {\r\n            console.log(this);\r\n            return;\r\n        }\r\n\r\n        if (this.isTurningPlayer() && this.turns < 2) {\r\n            console.log('make turn player', this.currentPlayer.index, this.singleMode);\r\n\r\n            const attack = this.myPlayer.controls[code];\r\n            if (!this.myPlayer.isAttackAvailable(attack)) return;\r\n\r\n            clearTimeout(this.turnTimer);\r\n            this.prepareAttack(attack, this.myPlayer);\r\n\r\n            this.emit('gameChangeTurn', { attackCode: code });\r\n            this.endTurn();\r\n\r\n        } else {\r\n            // console.log('cant make turn');\r\n        }\r\n    }\r\n\r\n    endTurn() {\r\n        if (this.turns >= 2) { // подсчет\r\n            this.endTurns();\r\n        } else {\r\n            if (this.singleMode) {\r\n                this.changeTurn(this.currentPlayer);\r\n                if (!this.isTurningPlayer()) {\r\n                    setTimeout(() => {\r\n                        this.makeAITurn();\r\n                    }, 500 + Math.random() * 500);\r\n                } else {\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n            } else {\r\n                this.changeTurn(this.myPlayer, this.opponentPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTurn(currentPlayer, otherPlayer) {\r\n        console.log('change turn, turns: ', this.turns);\r\n        currentPlayer.currentOptions.color = currentPlayer.options.color;\r\n        if (otherPlayer !== undefined) {\r\n            this.currentPlayer = otherPlayer;\r\n            otherPlayer.currentOptions.color = 'aqua';\r\n        } else {\r\n            this.currentPlayer = this.currentPlayer === this.player1 ? this.player2 : this.player1;\r\n            this.currentPlayer.currentOptions.color = 'aqua';\r\n        }\r\n    }\r\n\r\n    endTurns() {\r\n        setTimeout(() => {\r\n            console.log('подсчет');\r\n            this.calculateDamage(this.player1.attack.params, this.player2.attack.params);\r\n            setTimeout(() => {\r\n                this.players.forEach(player => {\r\n                    player.setState('endAttack', player.attack.params);\r\n                });\r\n                console.log('send end turn');\r\n                this.emit('gameEndAttack');\r\n                setTimeout(() => {\r\n                    this.round();\r\n                    this.emit('gameEndTurn');\r\n                }, 600);\r\n            }, 600);\r\n        }, 1000);\r\n    }\r\n\r\n    round() {\r\n        this.turns = 0;\r\n        if (this.singleMode) {\r\n            this.players.forEach(player => {\r\n                player.updateAbilities();\r\n            })\r\n        } else {\r\n            this.myPlayer.updateAbilities();\r\n        }\r\n        this.checkWinner();\r\n        this.emit('gameOpponentAbilities', {abilities: this.myPlayer.getAbilities()});\r\n    }\r\n\r\n    getCounterattack() {\r\n        const attacks = this.myPlayer.attack.params.counterattack;\r\n        if (!attacks) return false;\r\n        return attacks[Math.floor(Math.random() * attacks.length)];\r\n    }\r\n\r\n    makeAITurn() {\r\n        let attempts = true;\r\n\r\n        const attacks = this.currentPlayer.controls;\r\n        const keys = Object.keys(attacks);\r\n        let filteredKeys = keys.filter(k => k !== 'KeyL');\r\n\r\n        if (this.difficult >= 2) {\r\n            filteredKeys = filteredKeys.filter(k => k !== 'KeyW' && k !== 'KeyS');\r\n            if (this.turns === 0 && this.currentPlayer.energy >= 20) { // ход первым\r\n                filteredKeys = filteredKeys.filter(k => k !== 'KeyZ' && k !== 'KeyX' && k !== 'KeyA');\r\n            }\r\n        }\r\n\r\n        while (attempts) {\r\n            let attackKey;\r\n            attackKey = filteredKeys[Math.floor(Math.random() * filteredKeys.length)];\r\n\r\n            if (this.difficult >= 2) { // medium\r\n                if (this.turns === 1 && this.currentPlayer.energy >= 20) { // ответный удар\r\n                    if (Math.random() < .35 * (this.difficult - 1)) {\r\n                        if (this.getCounterattack()) {\r\n                            attackKey = this.getCounterattack();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const attack = this.currentPlayer.controls[attackKey];\r\n\r\n            if (this.currentPlayer.isAttackAvailable(attack)) {\r\n                attempts = false;\r\n                this.prepareAttack(attack, this.currentPlayer);\r\n                this.endTurn();\r\n            } else {\r\n                console.log('try again');\r\n                filteredKeys = filteredKeys.filter(k => k !== attackKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    prepareAttack(attack, player) {\r\n        this.turns += 1;\r\n        player.setState('attack', attack);\r\n        player.energy -= attack.energy;\r\n        if (attack.mana) {\r\n            player.mana -= attack.mana;\r\n        }\r\n        player.updateState();\r\n    }\r\n\r\n    emit(name, params) {\r\n        if (!this.singleMode) {\r\n            this.engine.emitToRoom(name, params);\r\n        }\r\n    }\r\n\r\n    calculateDamage(attack1, attack2) {\r\n        let player1 = this.player1;\r\n        let player2 = this.player2;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            if (i > 0) {\r\n                [attack1, attack2] = [attack2, attack1];\r\n                [player1, player2] = [player2, player1];\r\n            }\r\n            if (attack1) {\r\n                for (let aa = 0; aa < attack1.attackArea.length; aa++) {\r\n                    if (attack1.attackArea[aa] === attack2.position) {\r\n                        if (attack2.blockType && attack2.blockType === attack1.attackType) {\r\n                            const damage = Math.max(0, Math.floor(((-attack1.damage[aa]) + (attack1.damage[aa] * attack2.blockPercentage / 100))));\r\n                            player2.updateHealth(damage);\r\n                        } else {\r\n                            let damage = attack1.damage[aa];\r\n                            if (attack1.weakness) {\r\n                                attack1.weakness.forEach(e => {\r\n                                    if (e.id === attack2.id) {\r\n                                        damage += e.damage;\r\n                                    }\r\n                                });\r\n                            }\r\n                            const armor = damage * player2.armor / 100;\r\n                            player2.updateHealth(Math.floor(-damage + armor));\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.emit('gameEndCalculating', {health1: player2.hp, health2: player1.hp});\r\n        // this.player1.showDamage();\r\n        // this.player2.showDamage();\r\n    }\r\n\r\n    checkWinner() {\r\n        let restart = false;\r\n        if (this.player1.hp <= 0) {\r\n            this.player2.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (this.player2.hp <= 0) {\r\n            this.player1.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (restart) {\r\n            this.restartGame();\r\n        }\r\n\r\n        if (this.singleMode && !this.isTurningPlayer()) {\r\n            const delay = restart ? 2000 : 500;\r\n            setTimeout(() => {\r\n                this.makeAITurn();\r\n            }, delay + Math.random() * 500);\r\n        }\r\n    }\r\n\r\n    restartGame() {\r\n        this.players.forEach(player => {\r\n            player.reset();\r\n        });\r\n        this.firstPlayer = this.firstPlayer === 1 ? 2 : 1;\r\n        this.setCurrentPlayer();\r\n    }\r\n\r\n    isTurningPlayer () {\r\n        return this.myPlayer === this.currentPlayer;\r\n    }\r\n\r\n    update() {\r\n        this.players.forEach(player => {\r\n            if (player.attack.dir > 0 && player.attack.time > 0) {\r\n                player.attack.time -= player.options.attack.speed;\r\n            } else if (player.attack.dir < 0 && player.attack.time < player.options.attack.startTime) {\r\n                player.attack.time += player.options.attack.speed;\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        this.display.render();\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import Game from \"./Game\";\r\n\r\nclass Engine {\r\n    constructor(socket) {\r\n        this.game = null;\r\n        this.play = false;\r\n        this.roomId = null;\r\n        this.socket = socket;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            // console.log(event.code);\r\n            this.makeTurn(event.code);\r\n        });\r\n\r\n        window.onblur = () => {\r\n            this.pauseGame();\r\n        };\r\n\r\n        window.onfocus = () => {\r\n            this.continueGame();\r\n        };\r\n\r\n        // sockets\r\n        this.socket.on('gameChangeTurn', (data) => {\r\n            this.game.onSocketEvent('gameChangeTurn', data);\r\n        });\r\n\r\n        this.socket.on('gameEndCalculating', (data) => {\r\n            this.game.onSocketEvent('gameEndCalculating', data);\r\n        });\r\n\r\n        this.socket.on('gameEndAttack', () => {\r\n            this.game.onSocketEvent('gameEndAttack');\r\n        });\r\n\r\n        this.socket.on('gameOpponentAbilities', (data) => {\r\n            this.game.onSocketEvent('gameOpponentAbilities', data);\r\n        });\r\n\r\n        this.socket.on('gameEndTurn', () => {\r\n            this.game.onSocketEvent('gameEndTurn');\r\n        });\r\n    }\r\n\r\n    startGame(myPlayerIndex, player1, player2, params) {\r\n        this.game = new Game(this, myPlayerIndex, player1, player2, params);\r\n        this.roomId = params.roomId;\r\n\r\n        if (!this.play) {\r\n            this.run();\r\n            this.play = true;\r\n        }\r\n    }\r\n\r\n    makeTurn(code) {\r\n        if (this.play) {\r\n            this.game.makeTurn(code);\r\n        }\r\n    }\r\n\r\n    pauseGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: false});\r\n    }\r\n\r\n    continueGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: true});\r\n    }\r\n\r\n    run() {\r\n        const frame = () => {\r\n            this.game.update();\r\n            this.game.render();\r\n\r\n            window.requestAnimationFrame(frame);\r\n        };\r\n\r\n        frame();\r\n    }\r\n\r\n    emitToRoom(url, params) {\r\n        if (this.roomId) {\r\n            const data = {\r\n                roomId: this.roomId,\r\n                ...params\r\n            };\r\n            this.socket.emit(url, data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","class Player {\r\n    constructor(options) {\r\n        this.name = options.name;\r\n        this.setSkin(options.skin);\r\n        this.wins = 0;\r\n        this.maxhp = 150;\r\n        this.hp = this.maxhp;\r\n        this.maxmana = 50;\r\n        this.mana = this.maxmana;\r\n        this.maxenergy = 80;\r\n        this.manaRegen = 5;\r\n        this.energy = this.maxenergy;\r\n        this.energyRegen = 10;\r\n        this.armor = 0;\r\n        this.position = 0;\r\n        this.index = options.index;\r\n        this.preparedAbilities = [];\r\n        this.abilities = {};\r\n        this.options = {\r\n            color: '#fff',\r\n            attack: {\r\n                width: 200,\r\n                height: 50,\r\n                startTime: 215,\r\n                speed: 6\r\n            }\r\n        };\r\n        this.currentOptions = {\r\n            color: this.options.color\r\n        };\r\n        this.attack = {\r\n            time: this.options.attack.startTime,\r\n            dir: -1,\r\n            params: {\r\n                name: ''\r\n            }\r\n        };\r\n        this.passiveAbilities = {\r\n            'enchanted-steel': {\r\n                keyName: 'enchanted-steel',\r\n                iconSrc: 'enchanted-steel.jpg',\r\n                turns: 4,\r\n                effects: {\r\n                    armor: 60\r\n                }\r\n            }\r\n        };\r\n        this.controls = {\r\n            // [area, position]: 0 jump, 1 stay, 2 sit\r\n            'KeyW': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 0,\r\n                energy: -10,\r\n                counterattack: ['KeyD', 'KeyA'],\r\n                name: 'Прыжок'\r\n            },\r\n            'KeyS': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 2,\r\n                energy: -10,\r\n                counterattack: ['KeyG'],\r\n                name: 'Присед'\r\n            },\r\n            'KeyF': {\r\n                id: 0,\r\n                damage: [20],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyJ'],\r\n                name: 'Удар в голову'\r\n            },\r\n            'KeyG': {\r\n                id: 1,\r\n                damage: [20, 20],\r\n                attackArea: [1, 2],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyF'],\r\n                weakness: [{\r\n                    id: 0,\r\n                    damage: -20\r\n                }],\r\n                name: 'Удар с ноги'\r\n            },\r\n            'KeyJ': {\r\n                id: 2,\r\n                damage: [20, 5],\r\n                attackArea: [1, 2],\r\n                attackType: 3,\r\n                position: 2,\r\n                energy: 20,\r\n                counterattack: ['KeyG'],\r\n                weakness: [{\r\n                    id: 1,\r\n                    damage: -20\r\n                }],\r\n                name: 'Подножка'\r\n            },\r\n            'KeyH': {\r\n                id: 3,\r\n                damage: [20, 15],\r\n                attackArea: [0, 1],\r\n                attackType: 1,\r\n                position: 0,\r\n                energy: 20,\r\n                counterattack: ['KeyD'],\r\n                weakness: [{\r\n                    id: 5, // удар с низа\r\n                    damage: -15\r\n                },\r\n                    {\r\n                        id: 4, // захват в прыжке\r\n                        damage: -20\r\n                    }\r\n                ],\r\n                name: 'Удар в прыжке'\r\n            },\r\n            'KeyA': {\r\n                id: 4,\r\n                damage: [20],\r\n                attackArea: [0],\r\n                attackType: 1,\r\n                position: 0,\r\n                energy: 20,\r\n                counterattack: ['KeyD'],\r\n                name: 'Захват в прыжке'\r\n            },\r\n            'KeyD': {\r\n                id: 5,\r\n                damage: [20],\r\n                attackArea: [0],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyF', 'KeyG', 'KeyJ'],\r\n                name: 'Удар с низа'\r\n            },\r\n            'KeyZ': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                blockType: 1,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                counterattack: ['KeyJ'],\r\n                name: 'Блок'\r\n            },\r\n            'KeyX': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 2,\r\n                blockType: 3,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                counterattack: ['KeyG'],\r\n                name: 'Нижний блок'\r\n            },\r\n            'KeyL': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Ничего не делать'\r\n            },\r\n            'KeyQ': {\r\n                damage: [60],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                mana: 35,\r\n                turns: 0,\r\n                type: 'active',\r\n                counterattack: ['KeyJ', 'KeyH'],\r\n                name: 'Силовой удар'\r\n            },\r\n            'KeyE': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: 10,\r\n                mana: 35,\r\n                type: 'passive',\r\n                counterattack: ['KeyJ', 'KeyH', 'KeyF'],\r\n                options: this.passiveAbilities['enchanted-steel'],\r\n                name: 'Зачарованная сталь'\r\n            },\r\n        }\r\n    }\r\n\r\n    setSkin(src) {\r\n        const image = new Image();\r\n        image.src = src;\r\n        this.skin = image;\r\n    }\r\n\r\n    getName() {\r\n        return this.name\r\n    }\r\n\r\n    getWins() {\r\n        return this.wins;\r\n    }\r\n\r\n    setState(state, params) {\r\n        switch (state) {\r\n            case 'attack':\r\n                console.log('attack state, ', this.index);\r\n                this.attack = {\r\n                    time: this.options.attack.startTime,\r\n                    params: params,\r\n                    dir: 1\r\n                };\r\n                break;\r\n            case 'endAttack':\r\n                console.log('end attack state, ', this.index);\r\n                this.attack.time = 0;\r\n                this.attack.dir = -1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.hp = this.maxhp;\r\n        this.mana = this.maxmana;\r\n        this.energy = this.maxenergy;\r\n        this.currentOptions.color = this.options.color;\r\n        this.abilities = {};\r\n    }\r\n\r\n    updateState() {\r\n        this.energy = Math.min(this.energy + this.energyRegen, this.maxenergy);\r\n        this.mana = Math.min(this.mana + this.manaRegen, this.maxmana);\r\n    }\r\n\r\n    prepareAbility(attack) {\r\n        if (attack.type === 'passive') {\r\n            this.preparedAbilities.push(attack);\r\n        }\r\n    }\r\n\r\n    applyAbility(ability) {\r\n        const img = new Image;\r\n        img.src = '/static/img/abilities/' + ability.options.iconSrc;\r\n\r\n        this.abilities[ability.options.keyName] = {\r\n            turns: ability.options.turns,\r\n            img,\r\n            iconSrc: ability.options.iconSrc,\r\n            effects: {...ability.options.effects}\r\n        };\r\n\r\n        Object.keys(ability.options.effects).forEach(key => {\r\n            this[key] += ability.options.effects[key];\r\n        })\r\n    }\r\n\r\n    removeAbility(ability) {\r\n        const thisAbility = this.abilities[ability];\r\n        Object.keys(thisAbility.effects).forEach(key => {\r\n            this[key] -= thisAbility.effects[key]\r\n        });\r\n        delete this.abilities[ability];\r\n    }\r\n\r\n    updateAbilities() {\r\n        Object.keys(this.abilities).forEach(key => {\r\n            const turns = this.abilities[key].turns -= 1;\r\n            if (turns <= 0) {\r\n                this.removeAbility(key);\r\n            }\r\n        });\r\n\r\n        this.preparedAbilities.forEach(ability => {\r\n            this.applyAbility(ability);\r\n        });\r\n\r\n        this.preparedAbilities = [];\r\n    }\r\n\r\n    getAbilities() {\r\n        return Object.keys(this.abilities);\r\n    }\r\n\r\n    parseAbilities(abilities) {\r\n        abilities.forEach(abilityName => {\r\n            if (!this.abilities.hasOwnProperty(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                const img = new Image;\r\n                img.src = '/static/img/abilities/' + ability.iconSrc;\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] += ability.effects[key];\r\n                });\r\n                this.abilities[abilityName] = {\r\n                    img\r\n                }\r\n            }\r\n        });\r\n\r\n        Object.keys(this.abilities).forEach(abilityName => {\r\n            if (!abilities.includes(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] -= ability.effects[key];\r\n                });\r\n                delete this.abilities[abilityName];\r\n            }\r\n        })\r\n    }\r\n\r\n    isAttackAvailable(attack) {\r\n        if (!attack || this.energy < attack.energy) return false;\r\n        if (attack.mana && !this.isAbilityAvailable(attack)) {\r\n            return false;\r\n        } else {\r\n            this.prepareAbility(attack); // побочный эффект\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isAbilityAvailable(attack) {\r\n        if (this.mana < attack.mana) {\r\n            return false;\r\n        }\r\n        if (attack.turns && this.turns !== attack.turns) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    updateHealth(add) {\r\n        this.hp += add;\r\n    }\r\n\r\n    setHealth(value) {\r\n        this.hp = value;\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import Player from \"./Player\";\r\n\r\nclass Golem extends Player {\r\n    constructor(options) {\r\n        super(options);\r\n        this.maxhp = 200;\r\n        this.hp = 200;\r\n        this.controls = {\r\n            // [area, position]: 0 jump, 1 stay, 2 sit\r\n            'KeyF': {\r\n                damage: [30],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                // counterattack: ['KeyJ'], ???\r\n                name: 'Прямой удар'\r\n            },\r\n            'KeyZ': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                blockType: 1,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                // counterattack: ['KeyJ'],\r\n                name: 'Блок'\r\n            },\r\n            'KeyL': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Ничего не делать'\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default Golem;\r\n","import Engine from './Core/Engine';\r\nimport Golem from \"./Player/Golem\";\r\nimport Player from \"./Player/Player\";\r\n\r\nwindow.onload = function() {\r\n    (() => {\r\n        const socket = io(window.location.host);\r\n\r\n        // init\r\n        let name;\r\n        fetch('/getName', {method: 'POST'})\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                name = json.name;\r\n                // engine.setName(name);\r\n            });\r\n\r\n        socket.emit('init');\r\n        socket.on('init', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        const elements = {\r\n            gameContainer: document.querySelector('.game'),\r\n            roomsContainer: document.querySelector('.room-list'),\r\n            formCreateRoom: document.getElementById('js-create-room'),\r\n            formTraining: document.getElementById('js-training-form'),\r\n            formBoss: document.getElementById('js-boss-form'),\r\n            gameStatus: document.querySelector('.js-game-status'),\r\n            player1Info: document.querySelector('.js-player-info-1'),\r\n            player2Info: document.querySelector('.js-player-info-2')\r\n        };\r\n\r\n        // создание комнаты\r\n        elements.formCreateRoom.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const data = new FormData(e.target);\r\n            const roomId = data.get('room_id');\r\n            const bgIndex = data.get('room_bg');\r\n            if (roomId) {\r\n                socket.emit('createRoom', { roomId, bgIndex, name });\r\n                elements.gameContainer.classList.add('active');\r\n            }\r\n        };\r\n\r\n        const mappingBotName = {\r\n            1: 'Легкий',\r\n            2: 'Средний',\r\n            3: 'Тяжелый'\r\n        };\r\n\r\n        // создание комнаты с ботом\r\n        elements.formTraining.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const difficult = formData.get('difficult');\r\n            const botName = 'ИИ (' + mappingBotName[difficult] + ')';\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: botName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: botName,\r\n                skin: '/static/img/skins/2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, player2, {\r\n                bgIndex: 1 + Math.floor(Math.random() * 9),\r\n                singleMode: true,\r\n                difficult\r\n            });\r\n        };\r\n\r\n        const mappingBoss = {\r\n            'forest-golem': Golem\r\n        };\r\n\r\n        // создание комнаты с боссом\r\n        elements.formBoss.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const bossValue = formData.get('boss_name');\r\n            const bossName = 'Босс ' + bossValue.match(new RegExp(/\\(.+?\\)/))[0];\r\n            const bossKey = bossValue.match(new RegExp(/.+(?=\\()/))\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: bossName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const boss = new mappingBoss[bossKey]({\r\n                name: bossName,\r\n                skin: '/static/img/skins/boss/golem.png',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, boss, {\r\n                bgIndex: 11,\r\n                singleMode: true,\r\n                difficult: 3\r\n            });\r\n        };\r\n\r\n        const updateRoomList = (rooms) => {\r\n              elements.roomsContainer.innerHTML = '';\r\n              Object.entries(rooms).forEach(([id, values]) => {\r\n                  const item = document.createElement('li');\r\n                  item.className = 'room-list__item';\r\n                  const button = document.createElement('button');\r\n                  button.textContent = 'Комната ' + id;\r\n                  button.addEventListener('click', () => {\r\n                      socket.emit('joinRoom', { name, roomId: id });\r\n                  });\r\n                  item.appendChild(button);\r\n                  elements.roomsContainer.appendChild(item);\r\n              })\r\n        };\r\n\r\n        socket.on('roomListUpdated', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        socket.on('startGame', (data) => {\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name: data.player1.name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: data.player2.name,\r\n                skin: '/static/img/skins/2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(data.playerIndex, player, player2, {\r\n                bgIndex: data.bgIndex,\r\n                roomId: data.roomId\r\n            });\r\n        });\r\n\r\n        socket.on('gamePlayersStatus', function(data) {\r\n            if (data.status) {\r\n                document.querySelector('.js-opponent-info').classList.remove('off');\r\n            } else {\r\n                document.querySelector('.js-opponent-info').classList.add('off');\r\n            }\r\n        });\r\n\r\n        socket.on('gameUserLeft', function(data) {\r\n            document.querySelector('.js-opponent-info').classList.add('left');\r\n        });\r\n\r\n        function renderGame(data) {\r\n            elements.gameStatus.innerHTML = data.status;\r\n            elements.gameContainer.classList.add('active');\r\n            elements.gameContainer.classList.add('play');\r\n\r\n            elements.player1Info.querySelector('.player-info__name').innerHTML = data.player1.name;\r\n            elements.player2Info.querySelector('.player-info__name').innerHTML = data.player2.name;\r\n\r\n            if (data.playerIndex === 2) {\r\n                elements.player1Info.classList.add('js-opponent-info');\r\n            } else {\r\n                elements.player2Info.classList.add('js-opponent-info');\r\n            }\r\n\r\n            document.querySelector('.js-opponent-info').classList.remove('left');\r\n        }\r\n\r\n        const engine = new Engine(socket);\r\n\r\n    })()\r\n};\r\n"],"sourceRoot":""}