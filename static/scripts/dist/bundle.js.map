{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./static/scripts/src/helpers/playerSettings.js","webpack:///./static/scripts/src/helpers/getAttackPosition.js","webpack:///./static/scripts/src/Core/Display.js","webpack:///./static/scripts/src/helpers/getRandom.js","webpack:///./static/scripts/src/Player/passiveAbilities.js","webpack:///./static/scripts/src/Player/effects.js","webpack:///./static/scripts/src/Player/helpers/generatePassiveAbility.js","webpack:///./static/scripts/src/Core/Game.js","webpack:///./static/scripts/src/Core/Engine.js","webpack:///./static/scripts/src/Player/attacks.js","webpack:///./static/scripts/src/Actors/Player.js","webpack:///./static/scripts/src/Actors/Golem.js","webpack:///./static/scripts/src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","size","x","y","position","color","health","max","magic","1","options","attackStartTime","currentAttackTime","2","Display","game","this","canvas","document","querySelector","ctx","getContext","gameWidth","width","gameHeight","height","clearRect","drawBackground","drawText","drawPlayers","globalAlpha","drawImage","background","font","fillStyle","textAlign","fillText","player1","getName","player2","getWins","player","playerSettings","currentPlayer","drawPlayer","imageX","posX","barX","attackDir","drawCells","drawPoints","params","attackOptions","attack","startTime","attackBlock","attackPosition","getAttackPosition","index","time","beginPath","Math","strokeStyle","rect","fill","stroke","skin","currentOptions","drawBars","keys","abilities","forEach","e","idx","img","lineWidth","arc","PI","offsetX","startPositionY","healthPosition","barDistance","energyPosition","manaPosition","drawBar","firstColor","mainColor","values","hp","maxhp","energy","maxenergy","mana","maxmana","floor","random","keyName","iconSrc","turns","effects","armor","activate","state","deactivate","skipTurn","prepareAbility","type","passiveAbilities","Game","engine","myPlayerIndex","test","display","debug","testMode","singleMode","turnTimer","difficult","Number","players","setMyPlayer","firstPlayer","setCurrentPlayer","setBackground","bgIndex","data","console","log","enemyAttack","opponentPlayer","getAttack","code","prepareAttack","changeTurn","myPlayer","setTimeout","makeTurn","setHealth","health1","health2","setState","parseAbilities","num","round","Image","src","isTurningPlayer","emit","isAttackAvailable","clearTimeout","attackCode","endTurn","endTurns","makeAITurn","otherPlayer","undefined","calculateDamage","updateAbilities","checkWinner","getAbilities","attempts","counterAttacks","getCounterattacks","filteredKeys","controls","filter","k","setAIPosition","getRandom","myPosition","attackKey","length","chance","boss","AIOptions","counterAttackChance","updateState","emitToRoom","attack1","attack2","canProtect","getOpponent","aa","attackArea","blockType","attackType","damage","blockPercentage","addHealth","weakness","id","effect","restart","wins","restartGame","reset","dir","speed","message","render","digitsKeys","Engine","socket","play","roomId","addEventListener","event","digit","setPlayerPosition","window","onblur","pauseGame","onfocus","continueGame","on","onSocketEvent","run","status","frame","update","requestAnimationFrame","setPosition","url","Player","setSkin","manaRegen","energyRegen","preparedAbilities","attacks","actions","image","min","push","ability","thisAbility","removeAbility","applyAbility","abilityName","includes","isAbilityAvailable","availableCounterAttacks","add","Golem","stun","onload","io","location","host","fetch","method","then","response","json","updateRoomList","rooms","elements","gameContainer","roomsContainer","formCreateRoom","getElementById","formTraining","formBoss","gameStatus","player1Info","player2Info","onsubmit","preventDefault","FormData","target","classList","mappingBotName","3","botName","renderGame","playerIndex","startGame","mappingBoss","bossValue","bossName","match","RegExp","bossKey","innerHTML","entries","item","createElement","className","button","textContent","appendChild","remove"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\r\n    size: {\r\n        x: 150,\r\n        y: 200\r\n    },\r\n    position: {\r\n        x: 30,\r\n        y: 190\r\n    },\r\n    color: '#fff',\r\n    health: {\r\n        color: 'green',\r\n        max: 100,\r\n        size: 23\r\n    },\r\n    magic: {\r\n        color: 'blue',\r\n        max: 100,\r\n        size: 23\r\n    }\r\n};\r\n","export default {\r\n    1: (options) => {\r\n        return {\r\n            x: options.x + (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 50\r\n        }\r\n    },\r\n    2: (options) => {\r\n        return {\r\n            x: options.x - 50 - (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 120\r\n        }\r\n    }\r\n};\r\n","import playerSettings from \"../helpers/playerSettings\";\r\nimport getAttackPosition from \"../helpers/getAttackPosition\";\r\n\r\nclass Display {\r\n    constructor(game) {\r\n        this.canvas = document.querySelector('#game');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.gameWidth = this.canvas.width;\r\n        this.gameHeight = this.canvas.height;\r\n        this.game = game;\r\n    }\r\n\r\n    render() {\r\n        const ctx = this.ctx;\r\n        ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);\r\n        this.drawBackground(ctx);\r\n        this.drawText(ctx);\r\n        this.drawPlayers(ctx);\r\n    }\r\n\r\n    drawBackground(ctx) {\r\n        ctx.globalAlpha = .6;\r\n        ctx.drawImage(this.game.background, 0, 0);\r\n        ctx.globalAlpha = 1;\r\n    }\r\n\r\n    drawText(ctx) {\r\n        ctx.font = \"16px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(this.game.player1.getName() + ' против ' + this.game.player2.getName(), this.gameWidth / 2, 40);\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillText(this.game.player1.getWins() + ':' + this.game.player2.getWins(), this.gameWidth / 2, 60);\r\n    }\r\n\r\n    drawPlayers(ctx) {\r\n        const player = playerSettings;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            const currentPlayer = i === 0 ? this.game.player1 : this.game.player2;\r\n            if (i === 0) { // player 1\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: player.position.x,\r\n                    posX: player.position.x,\r\n                    barX: 0,\r\n                    attackDir: 1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: player.position.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer);\r\n                this.drawPoints(ctx, {\r\n                    x: player.position.x + player.size.x + 25,\r\n                    y: player.position.y + player.size.y / 2\r\n                }, currentPlayer);\r\n            } else { // player 2\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: this.gameWidth - player.position.x - player.size.x,\r\n                    posX: this.gameWidth - player.position.x - player.size.x,\r\n                    barX: (this.gameWidth - player.position.x - player.size.x) - player.position.x,\r\n                    attackDir: -1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: this.gameWidth - player.position.x - player.size.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer);\r\n                this.drawPoints(ctx, {\r\n                    x: this.gameWidth - player.position.x - player.size.x - 25,\r\n                    y: player.position.y + player.size.y / 2\r\n                }, currentPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawPlayer(ctx, params) {\r\n        const player = playerSettings;\r\n        const currentPlayer = params.player;\r\n\r\n        // attack\r\n        const attackOptions = currentPlayer.options.attack;\r\n\r\n        const attackStartTime = attackOptions.startTime;\r\n        const attackBlock = {\r\n            width: attackOptions.width,\r\n            height: attackOptions.height\r\n        };\r\n\r\n        const attackPosition = getAttackPosition[currentPlayer.index]({\r\n            x: params.posX,\r\n            y: player.position.y - 10,\r\n            width: player.size.x,\r\n            attackStartTime,\r\n            currentAttackTime: currentPlayer.attack.time\r\n        });\r\n\r\n        // attack block\r\n        ctx.beginPath();\r\n        ctx.globalAlpha = Math.max(0, 1 - (currentPlayer.attack.time / attackStartTime));\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'blue';\r\n        ctx.rect(attackPosition.x, attackPosition.y, attackBlock.width, attackBlock.height);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.font = \"14px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(currentPlayer.attack.params.name, attackPosition.x + attackBlock.width / 2, attackPosition.y + 4 + attackBlock.height / 2);\r\n\r\n        ctx.globalAlpha = 1;\r\n\r\n        // other\r\n        ctx.drawImage(currentPlayer.skin, params.imageX, player.position.y, player.size.x, player.size.y);\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = currentPlayer.currentOptions.color;\r\n        ctx.rect(params.posX, player.position.y, player.size.x, player.size.y);\r\n        ctx.stroke();\r\n\r\n        this.drawBars(ctx, params.barX, currentPlayer);\r\n    }\r\n\r\n    drawCells(ctx, position, currentPlayer) {\r\n        Object.keys(currentPlayer.abilities).forEach((e, idx) => {\r\n            ctx.drawImage(currentPlayer.abilities[e].img, position.x + (idx * 55), position.y + 15, 40, 40);\r\n        });\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.rect(position.x + (i * 55), position.y + 15, 40, 40);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawPoints(ctx, position, currentPlayer) {\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = currentPlayer.position === i ? 'green' : '#8c8c8c';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.arc(position.x, position.y - 27 + (i * 27), 7, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n        }\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.arc(position.x, position.y - 27 + (i * 27), 7, 0, 2 * Math.PI);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawBars(ctx, offsetX, currentPlayer) {\r\n        const player = playerSettings;\r\n        const barDistance = 31;\r\n        const startPositionY = player.position.y - 5;\r\n\r\n        const healthPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 3};\r\n        const energyPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 2};\r\n        const manaPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance};\r\n\r\n        ctx.textAlign = \"left\";\r\n\r\n        this.drawBar(ctx, healthPosition,\r\n            {\r\n                firstColor: 'red',\r\n                mainColor: '#078c07',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.hp, currentPlayer.maxhp]\r\n            });\r\n        this.drawBar(ctx, energyPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#38a0d2',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.energy, currentPlayer.maxenergy]\r\n            });\r\n        this.drawBar(ctx, manaPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#19287b',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.mana, currentPlayer.maxmana]\r\n            });\r\n    }\r\n\r\n    drawBar(ctx, position, params) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.firstColor;\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.mainColor;\r\n        ctx.rect(position.x, position.y, Math.max(0, params.player.size.x * (params.values[0] / params.values[1])), params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillText(params.values[0] + \"/\" + params.values[1], position.x + 5, position.y + 16);\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.lineWidth = \"1\";\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport default Display;\r\n","export default (n) => {\r\n    return Math.floor(Math.random() * n);\r\n}\r\n","export default {\r\n    'enchanted-steel': {\r\n        keyName: 'enchanted-steel',\r\n        iconSrc: 'enchanted-steel.jpg',\r\n        turns: 4,\r\n        effects: {\r\n            armor: {\r\n                activate: (player) => {\r\n                    player.state.armor += 60;\r\n                },\r\n                deactivate: (player) => {\r\n                    player.state.armor -= 60;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    'stun': {\r\n        keyName: 'stun',\r\n        iconSrc: 'stun.png',\r\n        turns: 1,\r\n        effects: {\r\n            skipTurn: {\r\n                activate: (player) => {\r\n                    player.state.skipTurn = true;\r\n                },\r\n                deactivate: (player) => {\r\n                    player.state.skipTurn = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n","import generatePassiveAbility from \"./helpers/generatePassiveAbility\";\r\n\r\nexport default {\r\n    'stun': (value, player) => {\r\n        const chance = Math.random() < value / 100;\r\n        if (chance) {\r\n            player.prepareAbility(generatePassiveAbility('stun'));\r\n        }\r\n    }\r\n}\r\n","import passiveAbilities from \"../passiveAbilities\";\r\n\r\nexport default (key) => {\r\n    return {\r\n        type: 'passive',\r\n        options: passiveAbilities[key]\r\n    }\r\n}\r\n","import Display from \"./Display\";\r\nimport getRandom from \"../helpers/getRandom\";\r\nimport effects from \"../Player/effects\";\r\n\r\nclass Game {\r\n    constructor(engine, myPlayerIndex, player1, player2, params) {\r\n        this.engine = engine;\r\n        if (!params.test) {\r\n            this.display = new Display(this);\r\n        }\r\n        this.debug = false;\r\n        this.testMode = params.test || false;\r\n        this.singleMode = params.singleMode || false;\r\n        this.turns = 0;\r\n        this.turnTimer = null;\r\n        this.difficult = Number(params.difficult) || 1;\r\n        this.player1 = player1;\r\n        this.player2 = player2;\r\n        this.players = [this.player1, this.player2];\r\n        this.setMyPlayer(myPlayerIndex);\r\n        this.firstPlayer = 1;\r\n        this.setCurrentPlayer();\r\n        this.setBackground(params.bgIndex);\r\n    }\r\n\r\n    onSocketEvent(name, data) {\r\n        switch (name) {\r\n            case 'gameChangeTurn':\r\n                console.log('socket change turn, ', this.turns);\r\n\r\n                const enemyAttack = this.opponentPlayer.getAttack(data.code);\r\n                this.prepareAttack(enemyAttack, this.opponentPlayer);\r\n\r\n                if (this.turns < 2) {\r\n                    this.changeTurn(this.opponentPlayer, this.myPlayer);\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n\r\n                break;\r\n\r\n            case 'gameEndCalculating':\r\n                this.player1.setHealth(data.health1);\r\n                this.player2.setHealth(data.health2);\r\n                break;\r\n\r\n            case 'gameEndAttack':\r\n                console.log('socket gameEndAttack');\r\n                this.players.forEach(player => {\r\n                    player.setState('endAttack', player.attack.params);\r\n                });\r\n                break;\r\n\r\n            case 'gameOpponentAbilities':\r\n                console.log('socket gameOpponentAbilities');\r\n                console.log(data.abilities);\r\n                this.opponentPlayer.parseAbilities(data.abilities);\r\n                break;\r\n\r\n            case 'gameOpponentPosition':\r\n                this.opponentPlayer.position = data.num;\r\n                break;\r\n\r\n            case 'gameEndTurn':\r\n                console.log('socket gameEndTurn');\r\n                this.round();\r\n                break;\r\n        }\r\n    }\r\n\r\n    setMyPlayer(index) {\r\n        this.myPlayer = index === 1 ? this.player1 : this.player2;\r\n        this.opponentPlayer = index === 1 ? this.player2 : this.player1;\r\n    }\r\n\r\n    setCurrentPlayer() {\r\n        this.currentPlayer = this.firstPlayer === 1 ? this.player1 : this.player2;\r\n        this.currentPlayer.currentOptions.color = 'aqua';\r\n    }\r\n\r\n    setBackground(index) {\r\n        const background = new Image();\r\n        background.src = `/static/img/bg/${index}.jpg`;\r\n        this.background = background;\r\n    }\r\n\r\n    setPosition(num) {\r\n        if (this.isTurningPlayer() && this.turns < 2) {\r\n            this.myPlayer.position = num - 1;\r\n            this.emit('gameOpponentPosition', {num: num - 1});\r\n        }\r\n    }\r\n\r\n    setAIPosition(num) {\r\n        console.log('set position to ', num);\r\n        this.opponentPlayer.position = num;\r\n    }\r\n\r\n    makeTurn(code, test = false) {\r\n        console.log('try to make turn');\r\n\r\n        // debug info\r\n        if (code === 'KeyM') {\r\n            console.log(this);\r\n            return;\r\n        }\r\n\r\n        if (this.turns < 2 && (this.isTurningPlayer() || test)) {\r\n            this.console('make turn player: ' + this.currentPlayer.index + ': ', this.singleMode);\r\n\r\n            const attack = this.currentPlayer.getAttack(code);\r\n            if (!this.currentPlayer.isAttackAvailable(attack)) return;\r\n\r\n            clearTimeout(this.turnTimer);\r\n            this.prepareAttack(attack, this.currentPlayer);\r\n\r\n            this.emit('gameChangeTurn', { attackCode: code });\r\n            this.endTurn();\r\n\r\n        } else {\r\n            // console.log('cant make turn');\r\n        }\r\n    }\r\n\r\n    endTurn() {\r\n        if (this.turns >= 2) { // подсчет\r\n            this.endTurns();\r\n        } else {\r\n            if (this.singleMode) {\r\n                this.changeTurn(this.currentPlayer);\r\n                if (!this.isTurningPlayer() && !this.testMode) {\r\n                    setTimeout(() => {\r\n                        this.makeAITurn();\r\n                    }, 500 + Math.random() * 500);\r\n                } else {\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n            } else {\r\n                this.changeTurn(this.myPlayer, this.opponentPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTurn(currentPlayer, otherPlayer) {\r\n        console.log('change turn, turns: ', this.turns);\r\n        currentPlayer.currentOptions.color = currentPlayer.options.color;\r\n        if (otherPlayer !== undefined) {\r\n            this.currentPlayer = otherPlayer;\r\n            otherPlayer.currentOptions.color = 'aqua';\r\n        } else {\r\n            this.currentPlayer = this.currentPlayer === this.player1 ? this.player2 : this.player1;\r\n            this.currentPlayer.currentOptions.color = 'aqua';\r\n        }\r\n\r\n        // stun\r\n        if (this.isTurningPlayer() && this.currentPlayer.state.skipTurn) {\r\n            this.makeTurn('stun');\r\n        }\r\n    }\r\n\r\n    endTurns() {\r\n        console.log('подсчет');\r\n        if (!this.testMode) {\r\n            setTimeout(() => {\r\n                this.calculateDamage(this.player1.attack.params, this.player2.attack.params);\r\n                setTimeout(() => {\r\n                    this.players.forEach(player => {\r\n                        player.setState('endAttack', player.attack.params);\r\n                    });\r\n                    console.log('send end turn');\r\n                    this.emit('gameEndAttack');\r\n                    setTimeout(() => {\r\n                        this.round();\r\n                        this.emit('gameEndTurn');\r\n                    }, 600);\r\n                }, 600);\r\n            }, 1000);\r\n        } else {\r\n            this.calculateDamage(this.player1.attack.params, this.player2.attack.params);\r\n            this.players.forEach(player => {\r\n                player.setState('endAttack', player.attack.params);\r\n            });\r\n            this.round();\r\n        }\r\n    }\r\n\r\n    round() {\r\n        console.log('round');\r\n        this.turns = 0;\r\n        if (this.singleMode) {\r\n            this.players.forEach(player => {\r\n                player.updateAbilities();\r\n            })\r\n        } else {\r\n            this.myPlayer.updateAbilities();\r\n        }\r\n        this.checkWinner();\r\n        this.emit('gameOpponentAbilities', {abilities: this.myPlayer.getAbilities()});\r\n\r\n        // stun\r\n        if (this.isTurningPlayer() && this.currentPlayer.state.skipTurn) {\r\n            this.makeTurn('stun');\r\n        }\r\n    }\r\n\r\n    getOpponent() {\r\n        return this.currentPlayer === this.player1 ? this.player2 : this.player1;\r\n    }\r\n\r\n    makeAITurn() {\r\n        let attempts = true;\r\n        let counterAttacks = this.opponentPlayer.getCounterattacks(this.myPlayer.attack.params.keyName);\r\n        console.log('доступные контратаки: ', counterAttacks);\r\n\r\n        const keys = Object.keys(this.currentPlayer.controls);\r\n        let filteredKeys = keys.filter(k => k !== 'KeyL');\r\n\r\n        if (this.difficult >= 2) { // средние и тяжелые\r\n            filteredKeys = filteredKeys.filter(k => k !== 'KeyW' && k !== 'KeyS');\r\n            if (this.turns === 0) { // ход первым\r\n                if (this.currentPlayer.energy >= 20) {\r\n                    filteredKeys = filteredKeys.filter(k => k !== 'KeyZ' && k !== 'KeyX' && k !== 'KeyA');\r\n                }\r\n                this.setAIPosition(getRandom(3));\r\n            }\r\n        }\r\n\r\n        if (this.turns > 0) { // ответный удар позицией\r\n            if (Math.random() < 0.3 * this.difficult) {\r\n                const myPosition = this.myPlayer.position;\r\n                if (myPosition !== this.opponentPlayer.position) {\r\n                    this.setAIPosition(myPosition);\r\n                }\r\n            }\r\n        }\r\n\r\n        while (attempts) {\r\n            let attackKey;\r\n            attackKey = filteredKeys[getRandom(filteredKeys.length)]; // случайный выбор всех отфильтрованных атак\r\n\r\n            if (this.difficult >= 2) { // >= medium\r\n                if (this.turns === 1 && this.currentPlayer.energy >= 20) { // ответный удар\r\n                    const chance = this.opponentPlayer.boss ? this.opponentPlayer.AIOptions.counterAttackChance / 100 : .35 * (this.difficult - 1);\r\n                    if (Math.random() < chance) {\r\n                        if (counterAttacks.length > 0) {\r\n                            console.log('КОНТРАТАКА!');\r\n                            attackKey = counterAttacks[getRandom(counterAttacks.length)];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const attack = this.currentPlayer.controls[attackKey];\r\n\r\n            if (this.currentPlayer.isAttackAvailable(attack)) {\r\n                attempts = false;\r\n                this.prepareAttack(attack, this.currentPlayer);\r\n                this.endTurn();\r\n            } else {\r\n                console.log('try again');\r\n                filteredKeys = filteredKeys.filter(k => k !== attackKey);\r\n                counterAttacks = counterAttacks.filter(k => k !== attackKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    prepareAttack(attack, player) {\r\n        this.turns += 1;\r\n        console.log('turns ++');\r\n        player.setState('attack', attack);\r\n        player.energy -= attack.energy;\r\n        if (attack.mana) {\r\n            player.mana -= attack.mana;\r\n        }\r\n        player.updateState();\r\n    }\r\n\r\n    emit(name, params) {\r\n        if (!this.singleMode) {\r\n            this.engine.emitToRoom(name, params);\r\n        }\r\n    }\r\n\r\n    calculateDamage(attack1, attack2) {\r\n        let player1 = this.player1;\r\n        let player2 = this.player2;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            if (i > 0) {\r\n                [attack1, attack2] = [attack2, attack1];\r\n                [player1, player2] = [player2, player1];\r\n            }\r\n\r\n            let canProtect = true;\r\n\r\n            // position\r\n            const opponent = this.getOpponent(); // тот, кто ходит первый\r\n            // currentPlayer (противник)\r\n            if (opponent.position !== this.currentPlayer.position) {\r\n                canProtect = false;\r\n                if (this.currentPlayer === player1) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (attack1) {\r\n                for (let aa = 0; aa < attack1.attackArea.length; aa++) {\r\n                    if (attack1.attackArea[aa] === attack2.position) {\r\n                        if (attack2.blockType && attack2.blockType === attack1.attackType && canProtect) {\r\n                            const damage = Math.max(0, Math.floor(((-attack1.damage[aa]) + (attack1.damage[aa] * attack2.blockPercentage / 100))));\r\n                            player2.addHealth(damage);\r\n                        } else {\r\n                            let damage = attack1.damage[aa];\r\n                            if (attack1.weakness && canProtect) {\r\n                                attack1.weakness.forEach(e => {\r\n                                    if (e.id === attack2.id) {\r\n                                        damage += e.damage;\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            // effects\r\n                            if (attack1.effects) {\r\n                                Object.keys(attack1.effects).forEach(effect => {\r\n                                    effects[effect](attack1.effects[effect], player2);\r\n                                });\r\n                            }\r\n\r\n                            if (damage < 0) damage = 0;\r\n\r\n                            const armor = damage * player2.state.armor / 100;\r\n                            player2.addHealth(Math.floor(-damage + armor));\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.emit('gameEndCalculating', {health1: player2.hp, health2: player1.hp});\r\n        // this.player1.showDamage();\r\n        // this.player2.showDamage();\r\n    }\r\n\r\n    checkWinner() {\r\n        let restart = false;\r\n        if (this.player1.hp <= 0) {\r\n            this.player2.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (this.player2.hp <= 0) {\r\n            this.player1.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (restart) {\r\n            this.restartGame();\r\n        }\r\n        if (this.singleMode) {\r\n            if (!this.isTurningPlayer()) {\r\n                const delay = restart ? 2000 : 500;\r\n                setTimeout(() => {\r\n                    this.makeAITurn();\r\n                }, delay + Math.random() * 500);\r\n            }\r\n        } else {\r\n            if (this.isTurningPlayer()) {\r\n                this.turnTimer = setTimeout(() => {\r\n                    this.makeTurn('KeyL');\r\n                }, 2500);\r\n            }\r\n        }\r\n    }\r\n\r\n    restartGame() {\r\n        this.players.forEach(player => {\r\n            player.reset();\r\n        });\r\n        this.firstPlayer = this.firstPlayer === 1 ? 2 : 1;\r\n        this.setCurrentPlayer();\r\n    }\r\n\r\n    isTurningPlayer () {\r\n        return this.myPlayer === this.currentPlayer;\r\n    }\r\n\r\n    update() {\r\n        this.players.forEach(player => {\r\n            if (player.attack.dir > 0 && player.attack.time > 0) {\r\n                player.attack.time -= player.options.attack.speed;\r\n            } else if (player.attack.dir < 0 && player.attack.time < player.options.attack.startTime) {\r\n                player.attack.time += player.options.attack.speed;\r\n            }\r\n        })\r\n    }\r\n\r\n    console(message) {\r\n        if (this.debug) {\r\n            console.log(message);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.display.render();\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import Game from \"./Game\";\r\n\r\nconst digitsKeys = {\r\n    'Digit1': 1,\r\n    'Digit2': 2,\r\n    'Digit3': 3\r\n};\r\n\r\nclass Engine {\r\n    constructor(socket) {\r\n        this.game = null;\r\n        this.play = false;\r\n        this.roomId = null;\r\n        this.socket = socket;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            // console.log(event.code);\r\n            const digit = digitsKeys[event.code];\r\n            if (digit) {\r\n                this.setPlayerPosition(digit);\r\n            } else {\r\n                this.makeTurn(event.code);\r\n            }\r\n        });\r\n\r\n        window.onblur = () => {\r\n            this.pauseGame();\r\n        };\r\n\r\n        window.onfocus = () => {\r\n            this.continueGame();\r\n        };\r\n\r\n        // sockets\r\n        this.socket.on('gameChangeTurn', (data) => {\r\n            this.game.onSocketEvent('gameChangeTurn', data);\r\n        });\r\n\r\n        this.socket.on('gameEndCalculating', (data) => {\r\n            this.game.onSocketEvent('gameEndCalculating', data);\r\n        });\r\n\r\n        this.socket.on('gameEndAttack', () => {\r\n            this.game.onSocketEvent('gameEndAttack');\r\n        });\r\n\r\n        this.socket.on('gameOpponentAbilities', (data) => {\r\n            this.game.onSocketEvent('gameOpponentAbilities', data);\r\n        });\r\n\r\n        this.socket.on('gameOpponentPosition', (data) => {\r\n            this.game.onSocketEvent('gameOpponentPosition', data);\r\n        });\r\n\r\n        this.socket.on('gameEndTurn', () => {\r\n            this.game.onSocketEvent('gameEndTurn');\r\n        });\r\n    }\r\n\r\n    startGame(myPlayerIndex, player1, player2, params) {\r\n        this.game = new Game(this, myPlayerIndex, player1, player2, params);\r\n        this.roomId = params.roomId;\r\n\r\n        if (!this.play) {\r\n            this.run();\r\n            this.play = true;\r\n        }\r\n    }\r\n\r\n    pauseGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: false});\r\n    }\r\n\r\n    continueGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: true});\r\n    }\r\n\r\n    run() {\r\n        const frame = () => {\r\n            this.game.update();\r\n            this.game.render();\r\n\r\n            window.requestAnimationFrame(frame);\r\n        };\r\n\r\n        frame();\r\n    }\r\n\r\n    makeTurn(code) {\r\n        if (this.play) {\r\n            this.game.makeTurn(code);\r\n        }\r\n    }\r\n\r\n    setPlayerPosition(num) {\r\n        if (this.play) {\r\n            this.game.setPosition(num);\r\n        }\r\n    }\r\n\r\n    emitToRoom(url, params) {\r\n        if (this.roomId) {\r\n            const data = {\r\n                roomId: this.roomId,\r\n                ...params\r\n            };\r\n            this.socket.emit(url, data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","import passiveAbilities from \"./passiveAbilities\";\r\n\r\nexport default {\r\n    'KeyW': {\r\n        keyName: 'KeyW',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 0,\r\n        energy: -10,\r\n        name: 'Прыжок'\r\n    },\r\n    'KeyS': {\r\n        keyName: 'KeyS',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 2,\r\n        energy: -10,\r\n        name: 'Присед'\r\n    },\r\n    'KeyF': {\r\n        keyName: 'KeyF',\r\n        id: 0,\r\n        damage: [20],\r\n        attackArea: [1],\r\n        attackType: 1,\r\n        position: 1,\r\n        energy: 20,\r\n        name: 'Удар в голову'\r\n    },\r\n    'KeyG': {\r\n        keyName: 'KeyG',\r\n        id: 1,\r\n        damage: [20, 20],\r\n        attackArea: [1, 2],\r\n        attackType: 1,\r\n        position: 1,\r\n        energy: 20,\r\n        weakness: [{\r\n            id: 0,\r\n            damage: -20\r\n        }],\r\n        name: 'Удар с ноги'\r\n    },\r\n    'KeyJ': {\r\n        keyName: 'KeyJ',\r\n        id: 2,\r\n        damage: [20, 5],\r\n        attackArea: [1, 2],\r\n        attackType: 3,\r\n        position: 2,\r\n        energy: 20,\r\n        weakness: [\r\n            {id: 1, damage: -20},\r\n            {id: 'golem-a2', damage: -30}\r\n        ],\r\n        name: 'Подножка'\r\n    },\r\n    'KeyH': {\r\n        keyName: 'KeyH',\r\n        id: 3,\r\n        damage: [20, 15],\r\n        attackArea: [0, 1],\r\n        attackType: 1,\r\n        position: 0,\r\n        energy: 20,\r\n        weakness: [\r\n            {\r\n                id: 5, // удар с низа\r\n                damage: -15\r\n            },\r\n            {\r\n                id: 4, // захват в прыжке\r\n                damage: -20\r\n            }\r\n        ],\r\n        name: 'Удар в прыжке'\r\n    },\r\n    'KeyA': {\r\n        keyName: 'KeyA',\r\n        id: 4,\r\n        damage: [20],\r\n        attackArea: [0],\r\n        attackType: 1,\r\n        position: 0,\r\n        energy: 20,\r\n        name: 'Захват в прыжке'\r\n    },\r\n    'KeyD': {\r\n        keyName: 'KeyD',\r\n        id: 5,\r\n        damage: [20],\r\n        attackArea: [0],\r\n        attackType: 1,\r\n        position: 1,\r\n        energy: 20,\r\n        name: 'Удар с низа'\r\n    },\r\n    'KeyZ': {\r\n        keyName: 'KeyZ',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 1,\r\n        blockType: 1,\r\n        blockPercentage: 100,\r\n        energy: -10,\r\n        name: 'Блок'\r\n    },\r\n    'KeyX': {\r\n        keyName: 'KeyX',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 2,\r\n        blockType: 3,\r\n        blockPercentage: 100,\r\n        energy: -10,\r\n        name: 'Нижний блок'\r\n    },\r\n    'KeyL': {\r\n        keyName: 'KeyL',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 1,\r\n        energy: -10,\r\n        name: 'Ничего не делать'\r\n    },\r\n    'KeyQ': {\r\n        keyName: 'KeyQ',\r\n        damage: [60],\r\n        attackArea: [1],\r\n        attackType: 1,\r\n        position: 1,\r\n        energy: 20,\r\n        mana: 35,\r\n        turns: 0,\r\n        type: 'active',\r\n        name: 'Силовой удар'\r\n    },\r\n    'KeyE': {\r\n        keyName: 'KeyE',\r\n        damage: [0],\r\n        attackArea: [-1],\r\n        position: 1,\r\n        energy: 10,\r\n        mana: 35,\r\n        type: 'passive',\r\n        options: passiveAbilities['enchanted-steel'],\r\n        name: 'Зачарованная сталь'\r\n    },\r\n};\r\n","import attacks from \"../Player/attacks\";\r\n\r\nclass Player {\r\n    constructor(options) {\r\n        this.name = options.name;\r\n        this.setSkin(options.skin);\r\n        this.boss = false;\r\n        this.wins = 0;\r\n        this.maxhp = 150;\r\n        this.hp = this.maxhp;\r\n        this.maxmana = 50;\r\n        this.mana = this.maxmana;\r\n        this.maxenergy = 80;\r\n        this.manaRegen = 5;\r\n        this.energy = this.maxenergy;\r\n        this.energyRegen = 10;\r\n        this.state = {\r\n            armor: 0,\r\n            skipTurn: false\r\n        };\r\n        // this.armor = 0;\r\n        this.position = 0;\r\n        this.index = options.index;\r\n        this.preparedAbilities = [];\r\n        this.abilities = {};\r\n        this.options = {\r\n            color: '#fff',\r\n            attack: {\r\n                width: 200,\r\n                height: 50,\r\n                startTime: 215,\r\n                speed: 6\r\n            }\r\n        };\r\n        this.currentOptions = {\r\n            color: this.options.color\r\n        };\r\n        this.attack = {\r\n            time: this.options.attack.startTime,\r\n            dir: -1,\r\n            params: {\r\n                name: ''\r\n            }\r\n        };\r\n\r\n        this.controls = attacks;\r\n\r\n        this.counterAttacks = {\r\n            'KeyW': ['KeyD', 'KeyA'],\r\n            'KeyS': ['KeyG'],\r\n            'KeyF': ['KeyJ'],\r\n            'KeyG': ['KeyF'],\r\n            'KeyH': ['KeyD'],\r\n            'KeyJ': ['KeyG'],\r\n            'KeyA': ['KeyD'],\r\n            'KeyD': ['KeyF', 'KeyG', 'KeyJ'],\r\n            'KeyZ': ['KeyJ'],\r\n            'KeyX': ['KeyG'],\r\n            // 'KeyL': ['KeyG'],\r\n            'KeyQ': ['KeyJ', 'KeyH'],\r\n            'KeyE': ['KeyJ', 'KeyH', 'KeyF', 'KeyG'],\r\n        };\r\n\r\n        // вызов программой\r\n        this.actions = {\r\n            'stun': {\r\n                keyName: 'KeyL',\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Оглушен'\r\n            }\r\n        }\r\n    }\r\n\r\n    setSkin(src) {\r\n        if (!src) return;\r\n\r\n        const image = new Image();\r\n        image.src = '/static/img/skins/' + src;\r\n        this.skin = image;\r\n    }\r\n\r\n    getName() {\r\n        return this.name\r\n    }\r\n\r\n    getWins() {\r\n        return this.wins;\r\n    }\r\n\r\n    setState(state, params) {\r\n        switch (state) {\r\n            case 'attack':\r\n                console.log('attack state, ', this.index);\r\n                this.attack = {\r\n                    time: this.options.attack.startTime,\r\n                    params: params,\r\n                    dir: 1\r\n                };\r\n                break;\r\n            case 'endAttack':\r\n                console.log('end attack state, ', this.index);\r\n                this.attack.time = 0;\r\n                this.attack.dir = -1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.hp = this.maxhp;\r\n        this.mana = this.maxmana;\r\n        this.energy = this.maxenergy;\r\n        this.currentOptions.color = this.options.color;\r\n        this.abilities = {};\r\n    }\r\n\r\n    updateState() {\r\n        this.energy = Math.min(this.energy + this.energyRegen, this.maxenergy);\r\n        this.mana = Math.min(this.mana + this.manaRegen, this.maxmana);\r\n    }\r\n\r\n    prepareAbility(attack) {\r\n        if (attack.type === 'passive') {\r\n            this.preparedAbilities.push(attack);\r\n        }\r\n    }\r\n\r\n    applyAbility(ability) {\r\n        const img = new Image;\r\n        img.src = '/static/img/abilities/' + ability.options.iconSrc;\r\n\r\n        this.abilities[ability.options.keyName] = {\r\n            turns: ability.options.turns,\r\n            img,\r\n            iconSrc: ability.options.iconSrc,\r\n            effects: {...ability.options.effects}\r\n        };\r\n\r\n        Object.keys(ability.options.effects).forEach(key => {\r\n            ability.options.effects[key].activate(this);\r\n        })\r\n    }\r\n\r\n    removeAbility(ability) {\r\n        const thisAbility = this.abilities[ability];\r\n        Object.keys(thisAbility.effects).forEach(key => {\r\n            thisAbility.effects[key].deactivate(this);\r\n        });\r\n        delete this.abilities[ability];\r\n    }\r\n\r\n    updateAbilities() {\r\n        Object.keys(this.abilities).forEach(key => {\r\n            const turns = this.abilities[key].turns -= 1;\r\n            if (turns <= 0) {\r\n                this.removeAbility(key);\r\n            }\r\n        });\r\n\r\n        this.preparedAbilities.forEach(ability => {\r\n            this.applyAbility(ability);\r\n        });\r\n\r\n        this.preparedAbilities = [];\r\n    }\r\n\r\n    getAbilities() {\r\n        return Object.keys(this.abilities);\r\n    }\r\n\r\n    parseAbilities(abilities) {\r\n        abilities.forEach(abilityName => {\r\n            if (!this.abilities.hasOwnProperty(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                const img = new Image;\r\n                img.src = '/static/img/abilities/' + ability.iconSrc;\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] += ability.effects[key];\r\n                });\r\n                this.abilities[abilityName] = {\r\n                    img\r\n                }\r\n            }\r\n        });\r\n\r\n        Object.keys(this.abilities).forEach(abilityName => {\r\n            if (!abilities.includes(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] -= ability.effects[key];\r\n                });\r\n                delete this.abilities[abilityName];\r\n            }\r\n        })\r\n    }\r\n\r\n    isAttackAvailable(attack) {\r\n        if (!attack || this.energy < attack.energy) return false;\r\n        if (attack.mana && !this.isAbilityAvailable(attack)) {\r\n            return false;\r\n        } else {\r\n            this.prepareAbility(attack); // побочный эффект\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isAbilityAvailable(attack) {\r\n        if (this.mana < attack.mana) {\r\n            return false;\r\n        }\r\n        if (attack.turns && this.turns !== attack.turns) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getCounterattacks(code) {\r\n        const availableCounterAttacks = this.counterAttacks[code];\r\n        if (!availableCounterAttacks) {\r\n            return [];\r\n        }\r\n        return availableCounterAttacks;\r\n    }\r\n\r\n    getAttack(code) {\r\n        let attack = this.controls[code];\r\n        if (!attack) {\r\n            attack = this.actions[code];\r\n        }\r\n        return attack;\r\n    }\r\n\r\n    addHealth(add) {\r\n        this.hp += add;\r\n    }\r\n\r\n    setHealth(value) {\r\n        this.hp = value;\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import Player from \"./Player\";\r\n\r\nclass Golem extends Player {\r\n    constructor(options) {\r\n        super(options);\r\n        this.boss = true;\r\n        this.maxhp = 200;\r\n        this.hp = 200;\r\n        this.options.color = '#ff5722';\r\n        this.currentOptions = {\r\n            color: this.options.color\r\n        };\r\n        this.setSkin('boss/golem.png');\r\n        this.AIOptions = {\r\n            counterAttackChance: 60\r\n        };\r\n        this.controls = {\r\n            'KeyF': {\r\n                damage: [30],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                effects: {\r\n                    stun: 15\r\n                },\r\n                name: 'Прямой удар'\r\n            },\r\n            'KeyG': {\r\n                id: 'golem-a2',\r\n                damage: [20, 20],\r\n                attackArea: [1, 2],\r\n                position: 1,\r\n                energy: 20,\r\n                name: 'Удар по земле'\r\n            },\r\n            'KeyH': {\r\n                damage: [20],\r\n                attackArea: [0],\r\n                position: 1,\r\n                energy: 20,\r\n                name: 'Взмах молота'\r\n            },\r\n            'KeyZ': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                blockType: 1,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                name: 'Блок'\r\n            },\r\n            'KeyX': {\r\n                keyName: 'KeyX',\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 2,\r\n                blockType: 3,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                name: 'Нижний блок'\r\n            },\r\n            'KeyL': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Ничего не делать'\r\n            }\r\n        };\r\n\r\n        this.counterAttacks = {\r\n            'KeyF': ['KeyF', 'KeyG'],\r\n            'KeyG': ['KeyF', 'KeyG'],\r\n            'KeyJ': ['KeyG'],\r\n            'KeyH': ['KeyH'],\r\n            'KeyA': ['KeyH'],\r\n        }\r\n    }\r\n}\r\n\r\nexport default Golem;\r\n","import Engine from './Core/Engine';\r\nimport Golem from \"./Actors/Golem\";\r\nimport Player from \"./Actors/Player\";\r\n\r\nwindow.onload = function() {\r\n    (() => {\r\n        const socket = io(window.location.host);\r\n\r\n        // init\r\n        let name;\r\n        fetch('/getName', {method: 'POST'})\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                name = json.name;\r\n                // engine.setName(name);\r\n            });\r\n\r\n        socket.emit('init');\r\n        socket.on('init', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        const elements = {\r\n            gameContainer: document.querySelector('.game'),\r\n            roomsContainer: document.querySelector('.room-list'),\r\n            formCreateRoom: document.getElementById('js-create-room'),\r\n            formTraining: document.getElementById('js-training-form'),\r\n            formBoss: document.getElementById('js-boss-form'),\r\n            gameStatus: document.querySelector('.js-game-status'),\r\n            player1Info: document.querySelector('.js-player-info-1'),\r\n            player2Info: document.querySelector('.js-player-info-2')\r\n        };\r\n\r\n        // создание комнаты\r\n        elements.formCreateRoom.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const data = new FormData(e.target);\r\n            const roomId = data.get('room_id');\r\n            const bgIndex = data.get('room_bg');\r\n            if (roomId) {\r\n                socket.emit('createRoom', { roomId, bgIndex, name });\r\n                elements.gameContainer.classList.add('active');\r\n            }\r\n        };\r\n\r\n        const mappingBotName = {\r\n            1: 'Легкий',\r\n            2: 'Средний',\r\n            3: 'Тяжелый'\r\n        };\r\n\r\n        // создание комнаты с ботом\r\n        elements.formTraining.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const difficult = formData.get('difficult');\r\n            const botName = 'ИИ (' + mappingBotName[difficult] + ')';\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: botName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: botName,\r\n                skin: '2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, player2, {\r\n                bgIndex: 1 + Math.floor(Math.random() * 9),\r\n                singleMode: true,\r\n                difficult\r\n            });\r\n        };\r\n\r\n        const mappingBoss = {\r\n            'forest-golem': Golem\r\n        };\r\n\r\n        // создание комнаты с боссом\r\n        elements.formBoss.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const bossValue = formData.get('boss_name');\r\n            const bossName = 'Босс ' + bossValue.match(new RegExp(/\\(.+?\\)/))[0];\r\n            const bossKey = bossValue.match(new RegExp(/.+(?=\\()/))\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: bossName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '1.jpg',\r\n                index: 1\r\n            });\r\n            const boss = new mappingBoss[bossKey]({\r\n                name: bossName,\r\n                // skin: '/static/img/skins/boss/golem.png',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, boss, {\r\n                bgIndex: 11,\r\n                singleMode: true,\r\n                difficult: 3\r\n            });\r\n        };\r\n\r\n        const updateRoomList = (rooms) => {\r\n              elements.roomsContainer.innerHTML = '';\r\n              Object.entries(rooms).forEach(([id, values]) => {\r\n                  const item = document.createElement('li');\r\n                  item.className = 'room-list__item';\r\n                  const button = document.createElement('button');\r\n                  button.textContent = 'Комната ' + id;\r\n                  button.addEventListener('click', () => {\r\n                      socket.emit('joinRoom', { name, roomId: id });\r\n                  });\r\n                  item.appendChild(button);\r\n                  elements.roomsContainer.appendChild(item);\r\n              })\r\n        };\r\n\r\n        socket.on('roomListUpdated', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        socket.on('startGame', (data) => {\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name: data.player1.name,\r\n                skin: '1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: data.player2.name,\r\n                skin: '2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(data.playerIndex, player, player2, {\r\n                bgIndex: data.bgIndex,\r\n                roomId: data.roomId\r\n            });\r\n        });\r\n\r\n        socket.on('gamePlayersStatus', function(data) {\r\n            if (data.status) {\r\n                document.querySelector('.js-opponent-info').classList.remove('off');\r\n            } else {\r\n                document.querySelector('.js-opponent-info').classList.add('off');\r\n            }\r\n        });\r\n\r\n        socket.on('gameUserLeft', function(data) {\r\n            document.querySelector('.js-opponent-info').classList.add('left');\r\n        });\r\n\r\n        function renderGame(data) {\r\n            elements.gameStatus.innerHTML = data.status;\r\n            elements.gameContainer.classList.add('active');\r\n            elements.gameContainer.classList.add('play');\r\n\r\n            elements.player1Info.querySelector('.player-info__name').innerHTML = data.player1.name;\r\n            elements.player2Info.querySelector('.player-info__name').innerHTML = data.player2.name;\r\n\r\n            if (data.playerIndex === 2) {\r\n                elements.player1Info.classList.add('js-opponent-info');\r\n            } else {\r\n                elements.player2Info.classList.add('js-opponent-info');\r\n            }\r\n\r\n            document.querySelector('.js-opponent-info').classList.remove('left');\r\n        }\r\n\r\n        const engine = new Engine(socket);\r\n\r\n    })()\r\n};\r\n"],"sourceRoot":""}