{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./static/scripts/src/Player/Player.js","webpack:///./static/scripts/src/Core/Game.js","webpack:///./static/scripts/src/Core/Engine.js","webpack:///./static/scripts/src/Player/Golem.js","webpack:///./static/scripts/src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Player","options","this","setSkin","skin","wins","maxhp","hp","maxmana","mana","maxenergy","manaRegen","energy","energyRegen","armor","index","preparedAbilities","abilities","color","attack","width","height","startTime","speed","currentOptions","time","dir","params","passiveAbilities","keyName","iconSrc","turns","effects","controls","damage","attackArea","position","counterattack","id","attackType","weakness","blockType","blockPercentage","type","src","image","Image","state","console","log","Math","min","push","ability","img","keys","forEach","thisAbility","removeAbility","applyAbility","abilityName","includes","isAbilityAvailable","prepareAbility","add","getAttackPosition","1","x","attackStartTime","currentAttackTime","y","2","Game","engine","myPlayerIndex","player1","player2","canvas","document","querySelector","ctx","getContext","gameWidth","gameHeight","turnTimer","singleMode","difficult","Number","players","setMyPlayer","currentPlayer","setBackground","bgIndex","data","enemyAttack","opponentPlayer","code","prepareAttack","changeTurn","myPlayer","setTimeout","makeTurn","setHealth","health1","health2","player","setState","parseAbilities","round","background","isTurningPlayer","isAttackAvailable","clearTimeout","emit","attackCode","endTurn","endTurns","makeAITurn","random","otherPlayer","undefined","calculateDamage","updateAbilities","checkWinner","getAbilities","attacks","floor","length","attempts","filteredKeys","filter","k","attackKey","getCounterattack","updateState","emitToRoom","attack1","attack2","aa","max","updateHealth","e","restart","restartGame","reset","clearRect","drawBackground","drawText","drawPlayers","drawImage","font","fillStyle","textAlign","fillText","getName","getWins","constructor","playerSettings","drawPlayer","imageX","posX","barX","attackDir","drawCells","size","attackOptions","attackBlock","attackPosition","beginPath","globalAlpha","strokeStyle","rect","fill","stroke","drawBars","idx","lineWidth","offsetX","startPositionY","healthPosition","barDistance","energyPosition","manaPosition","drawBar","firstColor","mainColor","values","health","magic","Engine","socket","game","play","roomId","addEventListener","event","window","onblur","pauseGame","onfocus","continueGame","on","onSocketEvent","run","status","frame","update","render","requestAnimationFrame","url","Golem","onload","io","location","host","fetch","method","then","response","json","updateRoomList","rooms","elements","gameContainer","roomsContainer","formCreateRoom","getElementById","formTraining","formBoss","gameStatus","player1Info","player2Info","onsubmit","preventDefault","FormData","target","classList","mappingBotName","3","botName","renderGame","playerIndex","startGame","mappingBoss","bossValue","bossName","match","RegExp","bossKey","boss","innerHTML","entries","item","createElement","className","button","textContent","appendChild","remove"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class Player {\r\n    constructor(options) {\r\n        this.name = options.name;\r\n        this.setSkin(options.skin);\r\n        this.wins = 0;\r\n        this.maxhp = 150;\r\n        this.hp = this.maxhp;\r\n        this.maxmana = 50;\r\n        this.mana = this.maxmana;\r\n        this.maxenergy = 80;\r\n        this.manaRegen = 5;\r\n        this.energy = this.maxenergy;\r\n        this.energyRegen = 10;\r\n        this.armor = 0;\r\n        this.index = options.index;\r\n        this.preparedAbilities = [];\r\n        this.abilities = {};\r\n        this.options = {\r\n            color: '#fff',\r\n            attack: {\r\n                width: 200,\r\n                height: 50,\r\n                startTime: 195,\r\n                speed: 6\r\n            }\r\n        };\r\n        this.currentOptions = {\r\n            color: this.options.color\r\n        };\r\n        this.attack = {\r\n            time: this.options.attack.startTime,\r\n            dir: -1,\r\n            params: {\r\n                name: ''\r\n            }\r\n        };\r\n        this.passiveAbilities = {\r\n            'enchanted-steel': {\r\n                keyName: 'enchanted-steel',\r\n                iconSrc: 'enchanted-steel.jpg',\r\n                turns: 4,\r\n                effects: {\r\n                    armor: 60\r\n                }\r\n            }\r\n        };\r\n        this.controls = {\r\n            // [area, position]: 0 jump, 1 stay, 2 sit\r\n            'KeyW': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 0,\r\n                energy: -10,\r\n                counterattack: ['KeyD', 'KeyA'],\r\n                name: 'Прыжок'\r\n            },\r\n            'KeyS': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 2,\r\n                energy: -10,\r\n                counterattack: ['KeyG'],\r\n                name: 'Присед'\r\n            },\r\n            'KeyF': {\r\n                id: 0,\r\n                damage: [20],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyJ'],\r\n                name: 'Удар в голову'\r\n            },\r\n            'KeyG': {\r\n                id: 1,\r\n                damage: [20, 20],\r\n                attackArea: [1, 2],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyF'],\r\n                weakness: [{\r\n                    id: 0,\r\n                    damage: -20\r\n                }],\r\n                name: 'Удар с ноги'\r\n            },\r\n            'KeyJ': {\r\n                id: 2,\r\n                damage: [20, 5],\r\n                attackArea: [1, 2],\r\n                attackType: 3,\r\n                position: 2,\r\n                energy: 20,\r\n                counterattack: ['KeyG'],\r\n                weakness: [{\r\n                    id: 1,\r\n                    damage: -20\r\n                }],\r\n                name: 'Подножка'\r\n            },\r\n            'KeyH': {\r\n                id: 3,\r\n                damage: [20, 15],\r\n                attackArea: [0, 1],\r\n                attackType: 1,\r\n                position: 0,\r\n                energy: 20,\r\n                counterattack: ['KeyD'],\r\n                weakness: [{\r\n                    id: 5, // удар с низа\r\n                    damage: -15\r\n                },\r\n                    {\r\n                        id: 4, // захват в прыжке\r\n                        damage: -20\r\n                    }\r\n                ],\r\n                name: 'Удар в прыжке'\r\n            },\r\n            'KeyA': {\r\n                id: 4,\r\n                damage: [20],\r\n                attackArea: [0],\r\n                attackType: 1,\r\n                position: 0,\r\n                energy: 20,\r\n                counterattack: ['KeyD'],\r\n                name: 'Захват в прыжке'\r\n            },\r\n            'KeyD': {\r\n                id: 5,\r\n                damage: [20],\r\n                attackArea: [0],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                counterattack: ['KeyF', 'KeyG', 'KeyJ'],\r\n                name: 'Удар с низа'\r\n            },\r\n            'KeyZ': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                blockType: 1,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                counterattack: ['KeyJ'],\r\n                name: 'Блок'\r\n            },\r\n            'KeyX': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 2,\r\n                blockType: 3,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                counterattack: ['KeyG'],\r\n                name: 'Нижний блок'\r\n            },\r\n            'KeyL': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Ничего не делать'\r\n            },\r\n            'KeyQ': {\r\n                damage: [60],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                mana: 35,\r\n                turns: 0,\r\n                type: 'active',\r\n                counterattack: ['KeyJ', 'KeyH'],\r\n                name: 'Силовой удар'\r\n            },\r\n            'KeyE': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: 10,\r\n                mana: 35,\r\n                type: 'passive',\r\n                counterattack: ['KeyJ', 'KeyH', 'KeyF'],\r\n                options: this.passiveAbilities['enchanted-steel'],\r\n                name: 'Зачарованная сталь'\r\n            },\r\n        }\r\n    }\r\n\r\n    setSkin(src) {\r\n        const image = new Image();\r\n        image.src = src;\r\n        this.skin = image;\r\n    }\r\n\r\n    getName() {\r\n        return this.name\r\n    }\r\n\r\n    getWins() {\r\n        return this.wins;\r\n    }\r\n\r\n    setState(state, params) {\r\n        switch (state) {\r\n            case 'attack':\r\n                console.log('attack state, ', this.index);\r\n                this.attack = {\r\n                    time: this.options.attack.startTime,\r\n                    params: params,\r\n                    dir: 1\r\n                };\r\n                break;\r\n            case 'endAttack':\r\n                console.log('end attack state, ', this.index);\r\n                this.attack.time = 0;\r\n                this.attack.dir = -1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.hp = this.maxhp;\r\n        this.mana = this.maxmana;\r\n        this.energy = this.maxenergy;\r\n        this.currentOptions.color = this.options.color;\r\n        this.abilities = {};\r\n    }\r\n\r\n    updateState() {\r\n        this.energy = Math.min(this.energy + this.energyRegen, this.maxenergy);\r\n        this.mana = Math.min(this.mana + this.manaRegen, this.maxmana);\r\n    }\r\n\r\n    prepareAbility(attack) {\r\n        if (attack.type === 'passive') {\r\n            this.preparedAbilities.push(attack);\r\n        }\r\n    }\r\n\r\n    applyAbility(ability) {\r\n        const img = new Image;\r\n        img.src = '/static/img/abilities/' + ability.options.iconSrc;\r\n\r\n        this.abilities[ability.options.keyName] = {\r\n            turns: ability.options.turns,\r\n            img,\r\n            iconSrc: ability.options.iconSrc,\r\n            effects: {...ability.options.effects}\r\n        };\r\n\r\n        Object.keys(ability.options.effects).forEach(key => {\r\n            this[key] += ability.options.effects[key];\r\n        })\r\n    }\r\n\r\n    removeAbility(ability) {\r\n        const thisAbility = this.abilities[ability];\r\n        Object.keys(thisAbility.effects).forEach(key => {\r\n            this[key] -= thisAbility.effects[key]\r\n        });\r\n        delete this.abilities[ability];\r\n    }\r\n\r\n    updateAbilities() {\r\n        Object.keys(this.abilities).forEach(key => {\r\n            const turns = this.abilities[key].turns -= 1;\r\n            if (turns <= 0) {\r\n                this.removeAbility(key);\r\n            }\r\n        });\r\n\r\n        this.preparedAbilities.forEach(ability => {\r\n            this.applyAbility(ability);\r\n        });\r\n\r\n        this.preparedAbilities = [];\r\n    }\r\n\r\n    getAbilities() {\r\n        return Object.keys(this.abilities);\r\n    }\r\n\r\n    parseAbilities(abilities) {\r\n        abilities.forEach(abilityName => {\r\n            if (!this.abilities.hasOwnProperty(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                const img = new Image;\r\n                img.src = '/static/img/abilities/' + ability.iconSrc;\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] += ability.effects[key];\r\n                });\r\n                this.abilities[abilityName] = {\r\n                    img\r\n                }\r\n            }\r\n        });\r\n\r\n        Object.keys(this.abilities).forEach(abilityName => {\r\n            if (!abilities.includes(abilityName)) {\r\n                const ability = this.passiveAbilities[abilityName];\r\n                Object.keys(ability.effects).forEach(key => {\r\n                    this[key] -= ability.effects[key];\r\n                });\r\n                delete this.abilities[abilityName];\r\n            }\r\n        })\r\n    }\r\n\r\n    isAttackAvailable(attack) {\r\n        if (!attack || this.energy < attack.energy) return false;\r\n        if (attack.mana && !this.isAbilityAvailable(attack)) {\r\n            return false;\r\n        } else {\r\n            this.prepareAbility(attack); // побочный эффект\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isAbilityAvailable(attack) {\r\n        if (this.mana < attack.mana) {\r\n            return false;\r\n        }\r\n        if (attack.turns && this.turns !== attack.turns) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    updateHealth(add) {\r\n        this.hp += add;\r\n    }\r\n\r\n    setHealth(value) {\r\n        this.hp = value;\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import Player from \"../Player/Player\";\r\n\r\nconst getAttackPosition = {\r\n    1: (options) => {\r\n        return {\r\n            x: options.x + (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 50\r\n        }\r\n    },\r\n    2: (options) => {\r\n        return {\r\n            x: options.x - 50 - (options.attackStartTime - options.currentAttackTime),\r\n            y: options.y + 120\r\n        }\r\n    }\r\n};\r\n\r\nclass Game {\r\n    static playerSettings = {\r\n        size: {\r\n            x: 150,\r\n            y: 200\r\n        },\r\n        position: {\r\n            x: 50,\r\n            y: 190\r\n        },\r\n        color: '#fff',\r\n        health: {\r\n            color: 'green',\r\n            max: 100,\r\n            size: 23\r\n        },\r\n        magic: {\r\n            color: 'blue',\r\n            max: 100,\r\n            size: 23\r\n        }\r\n    };\r\n\r\n    constructor(engine, myPlayerIndex, player1, player2, params) {\r\n        this.canvas = document.querySelector('#game');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.engine = engine;\r\n        this.gameWidth = this.canvas.width;\r\n        this.gameHeight = this.canvas.height;\r\n        this.turns = 0;\r\n        this.turnTimer = null;\r\n        this.singleMode = params.singleMode || false;\r\n        this.difficult = Number(params.difficult) || 1;\r\n        this.player1 = player1;\r\n        this.player2 = player2;\r\n        this.players = [this.player1, this.player2];\r\n        this.setMyPlayer(myPlayerIndex);\r\n        this.currentPlayer = this.player1;\r\n        this.currentPlayer.currentOptions.color = 'aqua';\r\n        this.setBackground(params.bgIndex);\r\n    }\r\n\r\n    onSocketEvent(name, data) {\r\n        switch (name) {\r\n            case 'gameChangeTurn':\r\n                console.log('socket change turn, ', this.turns);\r\n\r\n                const enemyAttack = this.opponentPlayer.controls[data.code];\r\n                this.prepareAttack(enemyAttack, this.opponentPlayer);\r\n\r\n                if (this.turns < 2) {\r\n                    this.changeTurn(this.opponentPlayer, this.myPlayer);\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n\r\n                break;\r\n\r\n            case 'gameEndCalculating':\r\n                this.player1.setHealth(data.health1);\r\n                this.player2.setHealth(data.health2);\r\n                break;\r\n\r\n            case 'gameEndAttack':\r\n                console.log('socket gameEndAttack');\r\n                this.players.forEach(player => {\r\n                    player.setState('endAttack', player.attack.params);\r\n                });\r\n                break;\r\n\r\n            case 'gameOpponentAbilities':\r\n                console.log('socket gameOpponentAbilities');\r\n                console.log(data.abilities);\r\n                this.opponentPlayer.parseAbilities(data.abilities);\r\n                break;\r\n\r\n            case 'gameEndTurn':\r\n                console.log('socket gameEndTurn');\r\n                this.round();\r\n                break;\r\n        }\r\n    }\r\n\r\n    setMyPlayer(index) {\r\n        this.myPlayer = index === 1 ? this.player1 : this.player2;\r\n        this.opponentPlayer = index === 1 ? this.player2 : this.player1;\r\n    }\r\n\r\n    setBackground(index) {\r\n        const background = new Image();\r\n        background.src = `/static/img/bg/${index}.jpg`;\r\n        this.background = background;\r\n    }\r\n\r\n    makeTurn(code) {\r\n        // debug info\r\n        if (code === 'KeyM') {\r\n            console.log(this);\r\n            return;\r\n        }\r\n\r\n        if (this.isTurningPlayer() && this.turns < 2) {\r\n            console.log('make turn player', this.currentPlayer.index, this.singleMode);\r\n\r\n            const attack = this.myPlayer.controls[code];\r\n            if (!this.myPlayer.isAttackAvailable(attack)) return;\r\n\r\n            clearTimeout(this.turnTimer);\r\n            this.prepareAttack(attack, this.myPlayer);\r\n\r\n            this.emit('gameChangeTurn', { attackCode: code });\r\n            this.endTurn();\r\n\r\n        } else {\r\n            // console.log('cant make turn');\r\n        }\r\n    }\r\n\r\n    endTurn() {\r\n        if (this.turns >= 2) { // подсчет\r\n            this.endTurns();\r\n        } else {\r\n            if (this.singleMode) {\r\n                this.changeTurn(this.currentPlayer);\r\n                if (!this.isTurningPlayer()) {\r\n                    setTimeout(() => {\r\n                        this.makeAITurn();\r\n                    }, 500 + Math.random() * 500);\r\n                } else {\r\n                    this.turnTimer = setTimeout(() => {\r\n                        this.makeTurn('KeyL');\r\n                    }, 1500);\r\n                }\r\n            } else {\r\n                this.changeTurn(this.myPlayer, this.opponentPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    changeTurn(currentPlayer, otherPlayer) {\r\n        console.log('change turn, turns: ', this.turns);\r\n        currentPlayer.currentOptions.color = currentPlayer.options.color;\r\n        if (otherPlayer !== undefined) {\r\n            this.currentPlayer = otherPlayer;\r\n            otherPlayer.currentOptions.color = 'aqua';\r\n        } else {\r\n            this.currentPlayer = this.currentPlayer === this.player1 ? this.player2 : this.player1;\r\n            this.currentPlayer.currentOptions.color = 'aqua';\r\n        }\r\n    }\r\n\r\n    endTurns() {\r\n        setTimeout(() => {\r\n            console.log('подсчет');\r\n            this.calculateDamage(this.player1.attack.params, this.player2.attack.params);\r\n            setTimeout(() => {\r\n                this.players.forEach(player => {\r\n                    player.setState('endAttack', player.attack.params);\r\n                });\r\n                console.log('send end turn');\r\n                this.emit('gameEndAttack');\r\n                setTimeout(() => {\r\n                    this.round();\r\n                    this.emit('gameEndTurn');\r\n                }, 600);\r\n            }, 600);\r\n        }, 1000);\r\n    }\r\n\r\n    round() {\r\n        this.turns = 0;\r\n        if (this.singleMode) {\r\n            this.players.forEach(player => {\r\n                player.updateAbilities();\r\n            })\r\n        } else {\r\n            this.myPlayer.updateAbilities();\r\n        }\r\n        this.checkWinner();\r\n        this.emit('gameOpponentAbilities', {abilities: this.myPlayer.getAbilities()});\r\n        if (this.singleMode && !this.isTurningPlayer()) {\r\n            setTimeout(() => {\r\n                this.makeAITurn();\r\n            }, 500 + Math.random() * 500);\r\n        }\r\n    }\r\n\r\n    getCounterattack() {\r\n        const attacks = this.myPlayer.attack.params.counterattack;\r\n        if (!attacks) return false;\r\n        return attacks[Math.floor(Math.random() * attacks.length)];\r\n    }\r\n\r\n    makeAITurn() {\r\n        let attempts = true;\r\n\r\n        const attacks = this.currentPlayer.controls;\r\n        const keys = Object.keys(attacks);\r\n        let filteredKeys = keys.filter(k => k !== 'KeyL');\r\n\r\n        if (this.difficult >= 2) {\r\n            filteredKeys = filteredKeys.filter(k => k !== 'KeyW' && k !== 'KeyS');\r\n            if (this.turns === 0 && this.currentPlayer.energy >= 20) { // ход первым\r\n                filteredKeys = filteredKeys.filter(k => k !== 'KeyZ' && k !== 'KeyX' && k !== 'KeyA');\r\n            }\r\n        }\r\n\r\n        while (attempts) {\r\n            let attackKey;\r\n            attackKey = filteredKeys[Math.floor(Math.random() * filteredKeys.length)];\r\n\r\n            if (this.difficult >= 2) { // medium\r\n                if (this.turns === 1 && this.currentPlayer.energy >= 20) { // ответный удар\r\n                    if (Math.random() < .35 * (this.difficult - 1)) {\r\n                        if (this.getCounterattack()) {\r\n                            attackKey = this.getCounterattack();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const attack = this.currentPlayer.controls[attackKey];\r\n            // console.log(keys);\r\n\r\n            if (this.currentPlayer.isAttackAvailable(attack)) {\r\n                attempts = false;\r\n                this.prepareAttack(attack, this.currentPlayer);\r\n                this.endTurn();\r\n            } else {\r\n                console.log('try again');\r\n                filteredKeys = filteredKeys.filter(k => k !== attackKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    prepareAttack(attack, player) {\r\n        this.turns += 1;\r\n        player.setState('attack', attack);\r\n        player.energy -= attack.energy;\r\n        if (attack.mana) {\r\n            player.mana -= attack.mana;\r\n        }\r\n        player.updateState();\r\n    }\r\n\r\n    emit(name, params) {\r\n        if (!this.singleMode) {\r\n            this.engine.emitToRoom(name, params);\r\n        }\r\n    }\r\n\r\n    calculateDamage(attack1, attack2) {\r\n        let player1 = this.player1;\r\n        let player2 = this.player2;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            if (i > 0) {\r\n                [attack1, attack2] = [attack2, attack1];\r\n                [player1, player2] = [player2, player1];\r\n            }\r\n            if (attack1) {\r\n                for (let aa = 0; aa < attack1.attackArea.length; aa++) {\r\n                    if (attack1.attackArea[aa] === attack2.position) {\r\n                        if (attack2.blockType && attack2.blockType === attack1.attackType) {\r\n                            const damage = Math.max(0, Math.floor(((-attack1.damage[aa]) + (attack1.damage[aa] * attack2.blockPercentage / 100))));\r\n                            player2.updateHealth(damage);\r\n                        } else {\r\n                            let damage = attack1.damage[aa];\r\n                            if (attack1.weakness) {\r\n                                attack1.weakness.forEach(e => {\r\n                                    if (e.id === attack2.id) {\r\n                                        damage += e.damage;\r\n                                    }\r\n                                });\r\n                            }\r\n                            const armor = damage * player2.armor / 100;\r\n                            player2.updateHealth(Math.floor(-damage + armor));\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.emit('gameEndCalculating', {health1: player2.hp, health2: player1.hp});\r\n        // this.player1.showDamage();\r\n        // this.player2.showDamage();\r\n    }\r\n\r\n    checkWinner() {\r\n        let restart = false;\r\n        if (this.player1.hp <= 0) {\r\n            this.player2.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (this.player2.hp <= 0) {\r\n            this.player1.wins += 1;\r\n            restart = true;\r\n        }\r\n        if (restart) {\r\n            this.restartGame();\r\n        }\r\n    }\r\n\r\n    restartGame() {\r\n        this.players.forEach(player => {\r\n            player.reset();\r\n        });\r\n        this.currentPlayer.currentOptions.color = 'aqua';\r\n    }\r\n\r\n    isTurningPlayer () {\r\n        return this.myPlayer === this.currentPlayer;\r\n    }\r\n\r\n    update() {\r\n        this.players.forEach(player => {\r\n            if (player.attack.dir > 0 && player.attack.time > 0) {\r\n                player.attack.time -= player.options.attack.speed;\r\n            } else if (player.attack.dir < 0 && player.attack.time < player.options.attack.startTime) {\r\n                player.attack.time += player.options.attack.speed;\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const ctx = this.ctx;\r\n        ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);\r\n        this.drawBackground(ctx);\r\n        this.drawText(ctx);\r\n        this.drawPlayers(ctx);\r\n    }\r\n\r\n    drawBackground(ctx) {\r\n        // ctx.globalAlpha = .8;\r\n        ctx.drawImage(this.background, 0, 0);\r\n        // ctx.globalAlpha = 1;\r\n    }\r\n\r\n    drawText(ctx) {\r\n        ctx.font = \"16px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(this.player1.getName() + ' против ' + this.player2.getName(), this.gameWidth / 2, 40);\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillText(this.player1.getWins() + ':' + this.player2.getWins(), this.gameWidth / 2, 60);\r\n    }\r\n\r\n    drawPlayers(ctx) {\r\n        const player = this.constructor.playerSettings;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            const currentPlayer = i === 0 ? this.player1 : this.player2;\r\n            if (i === 0) { // player 1\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: player.position.x,\r\n                    posX: player.position.x,\r\n                    barX: 0,\r\n                    attackDir: 1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: player.position.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer)\r\n            } else { // player 2\r\n                this.drawPlayer(ctx, {\r\n                    player: currentPlayer,\r\n                    imageX: this.gameWidth - player.position.x - player.size.x,\r\n                    posX: this.gameWidth - player.position.x - player.size.x,\r\n                    barX: (this.gameWidth - player.position.x - player.size.x) - player.position.x,\r\n                    attackDir: -1\r\n                });\r\n                this.drawCells(ctx, {\r\n                    x: this.gameWidth - player.position.x - player.size.x,\r\n                    y: player.position.y + player.size.y\r\n                }, currentPlayer)\r\n            }\r\n        }\r\n    }\r\n\r\n    drawPlayer(ctx, params) {\r\n        const player = this.constructor.playerSettings;\r\n        const currentPlayer = params.player;\r\n\r\n        // attack\r\n        const attackOptions = currentPlayer.options.attack;\r\n\r\n        const attackStartTime = attackOptions.startTime;\r\n        const attackBlock = {\r\n            width: attackOptions.width,\r\n            height: attackOptions.height\r\n        };\r\n\r\n        const attackPosition = getAttackPosition[currentPlayer.index]({\r\n            x: params.posX,\r\n            y: player.position.y - 10,\r\n            width: player.size.x,\r\n            attackStartTime,\r\n            currentAttackTime: currentPlayer.attack.time\r\n        });\r\n\r\n        ctx.beginPath();\r\n        ctx.globalAlpha = Math.max(0, 1 - (currentPlayer.attack.time / attackStartTime));\r\n        ctx.fillStyle = 'black';\r\n        ctx.strokeStyle = 'blue';\r\n        ctx.rect(attackPosition.x, attackPosition.y, attackBlock.width, attackBlock.height);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx.beginPath();\r\n        ctx.font = \"14px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(currentPlayer.attack.params.name, attackPosition.x + attackBlock.width / 2, attackPosition.y + 4 + attackBlock.height / 2);\r\n\r\n        ctx.globalAlpha = 1;\r\n\r\n        // other\r\n        ctx.drawImage(currentPlayer.skin, params.imageX, player.position.y, player.size.x, player.size.y);\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = currentPlayer.currentOptions.color;\r\n        ctx.rect(params.posX, player.position.y, player.size.x, player.size.y);\r\n        ctx.stroke();\r\n\r\n        this.drawBars(ctx, params.barX, currentPlayer);\r\n    }\r\n\r\n    drawCells(ctx, position, currentPlayer) {\r\n        Object.keys(currentPlayer.abilities).forEach((e, idx) => {\r\n            ctx.drawImage(currentPlayer.abilities[e].img, position.x + (idx * 55), position.y + 15, 40, 40);\r\n        });\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.lineWidth = \"1\";\r\n            ctx.rect(position.x + (i * 55), position.y + 15, 40, 40);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    drawBars(ctx, offsetX, currentPlayer) {\r\n        const player = this.constructor.playerSettings;\r\n        const barDistance = 31;\r\n        const startPositionY = player.position.y - 5;\r\n\r\n        const healthPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 3};\r\n        const energyPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance * 2};\r\n        const manaPosition = {x: offsetX + player.position.x, y: startPositionY - barDistance};\r\n\r\n        ctx.textAlign = \"left\";\r\n\r\n        this.drawBar(ctx, healthPosition,\r\n            {\r\n                firstColor: 'red',\r\n                mainColor: '#078c07',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.hp, currentPlayer.maxhp]\r\n            });\r\n        this.drawBar(ctx, energyPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#38a0d2',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.energy, currentPlayer.maxenergy]\r\n            });\r\n        this.drawBar(ctx, manaPosition,\r\n            {\r\n                firstColor: '#ddd',\r\n                mainColor: '#19287b',\r\n                player, currentPlayer,\r\n                values: [currentPlayer.mana, currentPlayer.maxmana]\r\n            });\r\n    }\r\n\r\n    drawBar(ctx, position, params) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.firstColor;\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = params.mainColor;\r\n        ctx.rect(position.x, position.y, Math.max(0, params.player.size.x * (params.values[0] / params.values[1])), params.player.health.size);\r\n        ctx.fill();\r\n\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillText(params.values[0] + \"/\" + params.values[1], position.x + 5, position.y + 16);\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.lineWidth = \"1\";\r\n        ctx.rect(position.x, position.y, params.player.size.x, params.player.health.size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import Game from \"./Game\";\r\n\r\nclass Engine {\r\n    constructor(socket) {\r\n        this.game = null;\r\n        this.play = false;\r\n        this.roomId = null;\r\n        this.socket = socket;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            // console.log(event.code);\r\n            this.makeTurn(event.code);\r\n        });\r\n\r\n        window.onblur = () => {\r\n            this.pauseGame();\r\n        };\r\n\r\n        window.onfocus = () => {\r\n            this.continueGame();\r\n        };\r\n\r\n        // sockets\r\n        this.socket.on('gameChangeTurn', (data) => {\r\n            this.game.onSocketEvent('gameChangeTurn', data);\r\n        });\r\n\r\n        this.socket.on('gameEndCalculating', (data) => {\r\n            this.game.onSocketEvent('gameEndCalculating', data);\r\n        });\r\n\r\n        this.socket.on('gameEndAttack', () => {\r\n            this.game.onSocketEvent('gameEndAttack');\r\n        });\r\n\r\n        this.socket.on('gameOpponentAbilities', (data) => {\r\n            this.game.onSocketEvent('gameOpponentAbilities', data);\r\n        });\r\n\r\n        this.socket.on('gameEndTurn', () => {\r\n            this.game.onSocketEvent('gameEndTurn');\r\n        });\r\n    }\r\n\r\n    startGame(myPlayerIndex, player1, player2, params) {\r\n        this.game = new Game(this, myPlayerIndex, player1, player2, params);\r\n        this.roomId = params.roomId;\r\n\r\n        if (!this.play) {\r\n            this.run();\r\n            this.play = true;\r\n        }\r\n    }\r\n\r\n    makeTurn(code) {\r\n        if (this.play) {\r\n            this.game.makeTurn(code);\r\n        }\r\n    }\r\n\r\n    pauseGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: false});\r\n    }\r\n\r\n    continueGame() {\r\n        this.emitToRoom('gamePlayersStatus', {status: true});\r\n    }\r\n\r\n    run() {\r\n        const frame = () => {\r\n            this.game.update();\r\n            this.game.render();\r\n\r\n            window.requestAnimationFrame(frame);\r\n        };\r\n\r\n        frame();\r\n    }\r\n\r\n    emitToRoom(url, params) {\r\n        if (this.roomId) {\r\n            const data = {\r\n                roomId: this.roomId,\r\n                ...params\r\n            };\r\n            this.socket.emit(url, data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","import Player from \"./Player\";\r\n\r\nclass Golem extends Player {\r\n    constructor(options) {\r\n        super(options);\r\n        this.maxhp = 200;\r\n        this.hp = 200;\r\n        this.controls = {\r\n            // [area, position]: 0 jump, 1 stay, 2 sit\r\n            'KeyF': {\r\n                damage: [30],\r\n                attackArea: [1],\r\n                attackType: 1,\r\n                position: 1,\r\n                energy: 20,\r\n                // counterattack: ['KeyJ'], ???\r\n                name: 'Прямой удар'\r\n            },\r\n            'KeyZ': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                blockType: 1,\r\n                blockPercentage: 100,\r\n                energy: -10,\r\n                // counterattack: ['KeyJ'],\r\n                name: 'Блок'\r\n            },\r\n            'KeyL': {\r\n                damage: [0],\r\n                attackArea: [-1],\r\n                position: 1,\r\n                energy: -10,\r\n                name: 'Ничего не делать'\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default Golem;\r\n","import Engine from './Core/Engine';\r\nimport Golem from \"./Player/Golem\";\r\nimport Player from \"./Player/Player\";\r\n\r\nwindow.onload = function() {\r\n    (() => {\r\n        const socket = io(window.location.host);\r\n\r\n        // init\r\n        let name;\r\n        fetch('/getName', {method: 'POST'})\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                name = json.name;\r\n                // engine.setName(name);\r\n            });\r\n\r\n        socket.emit('init');\r\n        socket.on('init', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        const elements = {\r\n            gameContainer: document.querySelector('.game'),\r\n            roomsContainer: document.querySelector('.room-list'),\r\n            formCreateRoom: document.getElementById('js-create-room'),\r\n            formTraining: document.getElementById('js-training-form'),\r\n            formBoss: document.getElementById('js-boss-form'),\r\n            gameStatus: document.querySelector('.js-game-status'),\r\n            player1Info: document.querySelector('.js-player-info-1'),\r\n            player2Info: document.querySelector('.js-player-info-2')\r\n        };\r\n\r\n        // создание комнаты\r\n        elements.formCreateRoom.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const data = new FormData(e.target);\r\n            const roomId = data.get('room_id');\r\n            const bgIndex = data.get('room_bg');\r\n            if (roomId) {\r\n                socket.emit('createRoom', { roomId, bgIndex, name });\r\n                elements.gameContainer.classList.add('active');\r\n            }\r\n        };\r\n\r\n        const mappingBotName = {\r\n            1: 'Легкий',\r\n            2: 'Средний',\r\n            3: 'Тяжелый'\r\n        };\r\n\r\n        // создание комнаты с ботом\r\n        elements.formTraining.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const difficult = formData.get('difficult');\r\n            const botName = 'ИИ (' + mappingBotName[difficult] + ')';\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: botName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: botName,\r\n                skin: '/static/img/skins/2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, player2, {\r\n                bgIndex: 1 + Math.floor(Math.random() * 9),\r\n                singleMode: true,\r\n                difficult\r\n            });\r\n        };\r\n\r\n        const mappingBoss = {\r\n            'forest-golem': Golem\r\n        };\r\n\r\n        // создание комнаты с боссом\r\n        elements.formBoss.onsubmit = function(e) {\r\n            e.preventDefault();\r\n            const formData = new FormData(e.target);\r\n            const bossValue = formData.get('boss_name');\r\n            const bossName = 'Босс ' + bossValue.match(new RegExp(/\\(.+?\\)/))[0];\r\n            const bossKey = bossValue.match(new RegExp(/.+(?=\\()/))\r\n            const data = {\r\n                status: 'Игра',\r\n                playerIndex: 1,\r\n                player1: {\r\n                    name\r\n                },\r\n                player2: {\r\n                    name: bossName\r\n                }\r\n            };\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const boss = new mappingBoss[bossKey]({\r\n                name: bossName,\r\n                skin: '/static/img/skins/boss/golem.png',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(1, player, boss, {\r\n                bgIndex: 11,\r\n                singleMode: true,\r\n                difficult: 3\r\n            });\r\n        };\r\n\r\n        const updateRoomList = (rooms) => {\r\n              elements.roomsContainer.innerHTML = '';\r\n              Object.entries(rooms).forEach(([id, values]) => {\r\n                  const item = document.createElement('li');\r\n                  item.className = 'room-list__item';\r\n                  const button = document.createElement('button');\r\n                  button.textContent = 'Комната ' + id;\r\n                  button.addEventListener('click', () => {\r\n                      socket.emit('joinRoom', { name, roomId: id });\r\n                  });\r\n                  item.appendChild(button);\r\n                  elements.roomsContainer.appendChild(item);\r\n              })\r\n        };\r\n\r\n        socket.on('roomListUpdated', (data) => {\r\n            updateRoomList(data.rooms);\r\n        });\r\n\r\n        socket.on('startGame', (data) => {\r\n\r\n            renderGame(data);\r\n\r\n            const player = new Player({\r\n                name: data.player1.name,\r\n                skin: '/static/img/skins/1.jpg',\r\n                index: 1\r\n            });\r\n            const player2 = new Player({\r\n                name: data.player2.name,\r\n                skin: '/static/img/skins/2.jpg',\r\n                index: 2\r\n            });\r\n\r\n            engine.startGame(data.playerIndex, player, player2, {\r\n                bgIndex: data.bgIndex,\r\n                roomId: data.roomId\r\n            });\r\n        });\r\n\r\n        socket.on('gamePlayersStatus', function(data) {\r\n            if (data.status) {\r\n                document.querySelector('.js-opponent-info').classList.remove('off');\r\n            } else {\r\n                document.querySelector('.js-opponent-info').classList.add('off');\r\n            }\r\n        });\r\n\r\n        socket.on('gameUserLeft', function(data) {\r\n            document.querySelector('.js-opponent-info').classList.add('left');\r\n        });\r\n\r\n        function renderGame(data) {\r\n            elements.gameStatus.innerHTML = data.status;\r\n            elements.gameContainer.classList.add('active');\r\n            elements.gameContainer.classList.add('play');\r\n\r\n            elements.player1Info.querySelector('.player-info__name').innerHTML = data.player1.name;\r\n            elements.player2Info.querySelector('.player-info__name').innerHTML = data.player2.name;\r\n\r\n            if (data.playerIndex === 2) {\r\n                elements.player1Info.classList.add('js-opponent-info');\r\n            } else {\r\n                elements.player2Info.classList.add('js-opponent-info');\r\n            }\r\n\r\n            document.querySelector('.js-opponent-info').classList.remove('left');\r\n        }\r\n\r\n        const engine = new Engine(socket);\r\n\r\n    })()\r\n};\r\n"],"sourceRoot":""}